<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vite剖析</title>
      <link href="/2024/01/08/Vite%E5%89%96%E6%9E%90/"/>
      <url>/2024/01/08/Vite%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言: 小弟不才,大胆猜测 以后前端项目构建工具<strong>Vite</strong>是未来.所以多学学它的核心底层思想.这一点也不过分.</p></blockquote><p>先说说早期:</p><ul><li>  构建大型的项目,数千个模块非常普遍,开发时构建工具,也会受到<strong>性能瓶颈</strong></li><li>  开发过程时,启动项目需要很长时间,HMR也需要等待几秒钟才可以,如此反复极大影响开发者的<strong>开发效率</strong></li></ul><p><strong>Vite的出现</strong>,实现开发阶段无打包或者说是让浏览器去执行,多亏EsModule模块规范</p><ul><li>  每个特有的模块都会发起一个请求,内部起一个服务,针对不同的模块做不同的处理.</li><li>  当然这也会造成请求过多,当然Vite内部实现了<strong>预构建</strong>,将一些依赖中的子依赖,最终只需请求一次即可.</li><li>  使用<strong>ESbuild</strong>进行预构建处理,并且在内部中 也存在一些ts jsx等类型,也会使用<strong>ESbuild</strong>进行转换</li><li>  提供更快的<strong>HMR</strong>,允许一个模块进行替换,不会影响页面其他部分,</li><li>  当然最终打包还是使用的是<strong>Rollup</strong> 更加灵活,生态更加成熟,兼容生态,毕竟Rollup的npm包下载量过亿,生态也经营7年左右<h3 id="接下来我们重点围绕3部分-来让我们更懂Vite这个东西"><a href="#接下来我们重点围绕3部分-来让我们更懂Vite这个东西" class="headerlink" title="接下来我们重点围绕3部分,来让我们更懂Vite这个东西"></a>接下来我们重点围绕3部分,来让我们更懂<strong>Vite</strong>这个东西</h3></li></ul><h3 id="1-开发阶段"><a href="#1-开发阶段" class="headerlink" title="1.开发阶段:"></a><strong>1.开发阶段:</strong></h3><p>首先我们简单创建一个Vite项目</p><p>执行 :<br><code>yarn create Vite</code>快速建立一个Vite+vue3模版</p><p><code> yarn install</code> 后 <code>yarn serve</code></p><p>启动项目:</p><blockquote><p>Vite内部帮我们起了一个服务,我们大概来看下具体做了哪些事情.</p><p>我们发现启动项目之后非常快,项目就启动完毕了<br>我们截图看下项目的network! ! !</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15554b35928c40b9a75020b0ce0be347~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1538&h=668&s=210601&e=png&b=fefefe" alt="image.png"></p><p><strong>非常多的请求!</strong> 🤫 🤫 🤫</p><p>果然把项目中的模块都转换成ESM模块,这样每次每个模块请求都会经过服务器拦截.然后经过不同的中间件处理</p><p><strong>那你可能会有一个疑问,有些第三方库根本不是符合ESM的模块啊,那你咋办?</strong></p><blockquote><p>答案:当然尤大也知道,那肯定需要做一层转换啊,将UMD模块,CMD模块转换成统一的ESM模块,在<strong>预构建中</strong>处理</p></blockquote><p><strong>这么多请求,这对带宽的压力也有点大啊?</strong></p><blockquote><p>答案:当然尤大也知道,那就是在一个库中,如果存在多个引入模块,都处理成一个模块中,这样只需请求一次啦!也是在<strong>预构建中</strong>处理</p></blockquote><p>okok我们知道,当你需要什么模块,就去请求,此时返回给浏览器,完全不需要开发打包,实现 <strong>no bundle</strong> 概念,所以这样就快多了🐮🐮</p><p>注意⚠️ (此时的ts,vue等每个请求都以 application/javascript处理,都统一以js返回形式处理)<strong>浏览器只能识别js</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74a65284b5164dee8fb78e1df8666d26~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=792&h=468&s=100132&e=png&b=fcfcfc" alt="image.png"></p><p><strong>Vite内部,使用connnet包创建一个服务,以中间件的形式处理不同的请求</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/824adfa865404a8c89892ab4aae222a5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=318&h=361&s=20911&e=png&a=1&b=fefefe" alt="vite setve.png"></p><p>从入口文件 index.html开始,当处理index.html时,发现内部有其他的资源的请求!</p><p>比如发现<code>main.ts</code><br>此时请求main.ts,会有专门的中间件处理,并返回给浏览器执行</p><p>返回内容:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db8b67f4fdf74b88b23207338e0940ba~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1464&h=558&s=130324&e=png&b=151718" alt="carbon (5).png"></p><p>我们发现引入的Vue模块,路径会被内部解析到.vite下.(<em><strong>这是访问预构建的路径,我们后面了解一下</strong></em>)<br>此时会去请求<code>Vue</code>,<code>style.css</code>,<code>App.vue</code>资源</p><p>此时运用到中间件,不同的资源,不同的中间件处理</p><p>我们重点看下遇到<strong>vue组件</strong>是怎么处理的呢?</p><p>首先我们应该知道,在创建一个新的模版中,会有一个vite.config.ts来对项目的开发与构建中做配置.</p><p>我们可以发现有一个<code>@vitejs/plugin-vue</code>插件</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d93995a015040a5930faf9363104487~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=908&h=670&s=126015&e=png&b=161819" alt="carbon (6).png"><br>这个插件是用来处理Vue组件的,用来扩展对Vue的支持,同时还会注入热更新的代码.<br>简单看下</p><p><strong>有同志就不懂了,这插件跟处理Vue组件有啥关系?</strong></p><blockquote><p>答案: 其实呢,插件机制更够让Vite内部处理更多的资源,Vite内部本身是支持像js文件处理的,那不能处理Vue组件代码,scss等资源吧,都写在Vite内部,代码只会变得膨大臃肿,使用插件这种机制,处理不同的资源,对于日后的维护性,以及扩展性是非常友好的.</p></blockquote><p>重点我们说下遇到Vue组件,会怎么处理转换,遇到Sfc组件,会使用@vue/compier-sfc转化,分为三部分,<code>template</code> <code>script</code> <code>css</code></p><p>我们需要处理不同的资源.</p><p><strong>最终返回给浏览器的,查看下图</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f91337d25ef4c3884a6a9d7c8d99aa7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1906&h=1570&s=368531&e=png&b=151718" alt="carbon (14).png"></p><p>图中第一部分: <strong>是组件的script部分</strong></p><p>图中第二部分: <strong>是组件的template部分,生成render函数</strong></p><p>图中第三部分: <strong>是组件的css部分</strong></p><p>我们需要知道引入一个组件,会导出组件实例,实例包含组件的render渲染函数<a href="https://cn.vuejs.org/api/options-rendering.html#render">渲染选项 | Vue.js (vuejs.org)</a></p><p>我们可以通过Vue文档了解一下渲染的机制<a href="https://cn.vuejs.org/guide/extras/rendering-mechanism.html">渲染机制 | Vue.js (vuejs.org)</a></p><p>最终得到了一个组件开发的最终结果.</p><p><em>特别说明</em>: Vue中的样式,最终处理成一个ESM,import快速导入.方便维护扩展.</p><p><code>import &quot;/src/App.vue?vue&amp;type=style&amp;index=0&amp;scoped=7a7a37b1&amp;lang.css&quot;;</code></p><h3 id="2-预构建"><a href="#2-预构建" class="headerlink" title="2.预构建"></a><strong>2.预构建</strong></h3><p>预构建做了什么事?<br>我们知道开发阶段,需要根据不同请求编辑返回.</p><p>那如果这么多请求需要怎么处理?</p><p>过多的请求会造成带宽的压力,造成请求的加载等待,严重影响用户的体验💣💣</p><p><strong>预构建因此而生:</strong></p><p>将过多的请求,处理成只有一个请求,这样只需请求一次,例如，lodash-es 有超过 600 个内置模块！当我们执行 import { debounce } from ‘lodash-es’ 时，浏览器同时发出 600 多个 HTTP 请求！即使服务器能够轻松处理它们，但大量请求会导致浏览器端的网络拥塞，使页面加载变得明显缓慢。通过将 lodash-es 预构建成单个模块，现在我们只需要一个HTTP请求！详情Vite官方文档(<a href="https://cn.vitejs.dev/guide/dep-pre-bundling.html">https://cn.vitejs.dev/guide/dep-pre-bundling.html</a>)</p><p>并且将一些模块.将CommonJs或者UMD的依赖转为Es模块, Vite开发的服务器 将所有的模块都视为ES模块处理.</p><p>什么条件模块下,才会预构建.</p><blockquote><p>答:只有一些裸模块,也就是第三方库,没有相对路径,像一些<code>antd,dayjs,vue</code> 等…..</p></blockquote><p>预构建,将处理的模块放在node_modules/.vite,也就是每次引入这些模块都会去这些已经预处理的模块中去拿取.</p><p>并且 请求时设置 HTTP 头 <code>max-age=31536000, immutable</code> 进行强缓存,不用每次都去处理,不会再经过 Vite Dev Server，直接用缓存结果.</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09f837974d8647e5bafd47bff4214d31~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=728&h=175&s=61737&e=png&b=fefefe" alt="image.png"></p><p>预构建分为<strong>手动开启与自动开启</strong>.</p><p>手动: 启动开发服务器时指定 <code>--force</code> 选项，或手动删除 <code>node_modules/.vite</code> 缓存目录</p><p>自动: 首次开启项目,我们会发现</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4305f77107e1467886f206a3aeab4c49~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1293&h=127&s=57823&e=png&b=1e1e1e" alt="image.png"></p><p><code>new dependencies optimized</code> 新的依赖正在预构建.</p><p>这样会把一些缓存到,<strong>.vite/</strong> 文件夹下:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f88bc33837a949bca22e563d2f1ba206~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=481&h=417&s=66157&e=png&b=262627" alt="image.png"></p><blockquote><p>注意: 依赖预构建仅适用于开发模式，并使用 <code>esbuild</code> 将依赖项转换为 ES 模块。在生产构建中，将使用 `@rollup/plugin-commonjs(<a href="https://cn.vitejs.dev/guide/dep-pre-bundling#file-system-cache">依赖预构建 | Vite 官方中文文档 (vitejs.dev)</a>)</p></blockquote><p>会有一个问题,那就是动态引入模块的时候,根本不知道你要引入什么模块,只能在文件被浏览器请求并转换后才能发现.也就是执行了才知道引入什么模块!</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b523b79944354d8b9afb1d1bdb0f7f59~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=533&h=38&s=14447&e=png&b=1f1f1f" alt="image.png"></p><p>正如我们上面看到的,意思发现了新的模块lodash-es,这时需要重新二次预构建,而且在有必要时候,会刷新页面.<br>这也就是为什么,我们常常在开发阶段,点击新的组件菜单的时候,发现莫名刷新一下,其实此时再预构建,等到第二次你在点击该页面就不会刷新了.</p><p>那我们有什么办法可以防止这种不好的体验呢?</p><blockquote><p>答:有的,Vite支持使用<code>optimizeDeps.include</code> 或 <code>optimizeDeps.exclude</code></p></blockquote><h4 id="include-使用此选项可强制预构建链接的包。"><a href="#include-使用此选项可强制预构建链接的包。" class="headerlink" title="include: 使用此选项可强制预构建链接的包。"></a>include: 使用此选项可强制预构建链接的包。</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54688cf76c464ea8ab7fe0fb60409ce5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=908&h=596&s=104005&e=png&b=151718" alt="carbon (7).png"></p><blockquote><p>我们可以发现一开始就会预构建了这些include的依赖,查看.metadata.json文件</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"optimized"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string">"jszip"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token string">"src"</span><span class="token operator">:</span> <span class="token string">"../../jszip/dist/jszip.min.js"</span><span class="token punctuation">,</span>   <span class="token string">"file"</span><span class="token operator">:</span> <span class="token string">"jszip.js"</span><span class="token punctuation">,</span>   <span class="token string">"fileHash"</span><span class="token operator">:</span> <span class="token string">"0e9ea30c"</span><span class="token punctuation">,</span>   <span class="token string">"needsInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"lodash-es"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token string">"src"</span><span class="token operator">:</span> <span class="token string">"../../lodash-es/lodash.js"</span><span class="token punctuation">,</span>   <span class="token string">"file"</span><span class="token operator">:</span> <span class="token string">"lodash-es.js"</span><span class="token punctuation">,</span>   <span class="token string">"fileHash"</span><span class="token operator">:</span> <span class="token string">"86bcc851"</span><span class="token punctuation">,</span>   <span class="token string">"needsInterop"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>后面打开该引入的模块,不会强制刷新了,体验杠杠的🎉🎉</strong></p><h4 id="exclude-在预构建中强制排除的依赖项。"><a href="#exclude-在预构建中强制排除的依赖项。" class="headerlink" title="exclude: 在预构建中强制排除的依赖项。"></a>exclude: 在预构建中强制排除的依赖项。</h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f37acbdf4d6040219e31688762ea5f50~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=760&h=566&s=94764&e=png&b=2b2b2b" alt="carbon (2).png"></p><p>我们将jsZip模块进行过滤,不构建,也就是不处理.这样会造成什么问题呢?</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec27ef456db543deb1c22e7180e45782~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=710&h=53&s=34875&e=png&b=fbedec" alt="image.png"></p><blockquote><p>直接给你报错了,<strong>jsZip</strong>根本不是<del>ES</del>模块,我们知道在开发阶段,是只能处理ES模块的.你排除了对jsZip的预构建.💥💥💥</p></blockquote><h3 id="3-插件系统"><a href="#3-插件系统" class="headerlink" title="3.插件系统"></a><strong>3.插件系统</strong></h3><pre><code>开发: Vite内部都是在Rollup的插件机制上,去实现一套类似的插件机制,大部分可以兼容rollup钩子.生产: 使用Rollup做生产的构建.直接使用Rollup成熟的打包能力进行扩展和优化</code></pre><p>也就是说其实大部分的rollup插件,可以直接在Vite插件中使用,详细[<a href="https://cn.vitejs.dev/guide/api-plugin.html#rollup-plugin-compatibility">插件 API | Vite 官方中文文档 (vitejs.dev)</a>]</p><p><strong>插件钩子:</strong><br>以下为通用钩子</p><p>以下钩子在服务器启动时被调用：</p><ul><li>  <a href="https://rollupjs.org/plugin-development/#options"><code>options</code></a></li><li>  <a href="https://rollupjs.org/plugin-development/#buildstart"><code>buildStart</code></a></li></ul><p>以下钩子会在每个传入模块请求时被调用：</p><ul><li>  <a href="https://rollupjs.org/plugin-development/#resolveid"><code>resolveId</code></a></li><li>  <a href="https://rollupjs.org/plugin-development/#load"><code>load</code></a></li><li>  <a href="https://rollupjs.org/plugin-development/#transform"><code>transform</code></a></li></ul><p>以下钩子在服务器关闭时被调用：</p><ul><li>  <a href="https://rollupjs.org/plugin-development/#buildend"><code>buildEnd</code></a></li><li>  <a href="https://rollupjs.org/plugin-development/#closebundle"><code>closeBundle</code></a></li></ul><p>开发阶段实现了一套自己的插件容器来调度Roolup钩子.</p><p>以下为Vite特有的钩子</p><p>[<code>config</code>](<a href="https://cn.vitejs.dev/guide/api-plugin.html#config">插件 API | Vite 官方中文文档 (vitejs.dev)</a>)</p><p>[<code>configResolved</code>](<a href="https://cn.vitejs.dev/guide/api-plugin.html#configresolved">插件 API | Vite 官方中文文档 (vitejs.dev)</a>)</p><p>….具体查看[Vite独有](<a href="https://cn.vitejs.dev/guide/api-plugin.html#vite-specific-hooks">插件 API | Vite 官方中文文档 (vitejs.dev)</a>)</p><p>我们直接快速导入我们的配置文件中.<br>我们重点看下,<code>transform</code> <code>load</code> <code>resolveId</code>,这三个钩子,大部分的插件都使用到,能运用到80%的场景中</p><ul><li><p>  <strong>transform:</strong> 简单来说 转换模块的哪痛,进行自定义转换,比如babel转换,或者有一个需求我们可能需要将当引入的svg文件.转化为一个Vue组件</p></li><li><p>  <strong>load:</strong> 加载模块的内容</p></li><li><p>  <strong>resolveId:</strong> 解析文件的路径</p></li></ul><p>插件执行的顺序,<a href="https://cn.vitejs.dev/guide/api-plugin.html#plugin-ordering">不懂就戳</a></p><ul><li>  Alias</li><li>  带有 <code>enforce: &#39;pre&#39;</code> 的用户插件</li><li>  Vite 核心插件</li><li>  没有 enforce 值的用户插件</li><li>  Vite 构建用的插件</li><li>  带有 <code>enforce: &#39;post&#39;</code> 的用户插件</li><li>  Vite 后置构建插件（最小化，manifest，报告）</li></ul><p>我们可以发现可以利用 <code>enforce = ’pre‘</code> 与 <code>’post‘</code>来进行对插件的顺序调整</p><p>使用<code>apply</code> 属性指明它们仅在 <code>&#39;build&#39;</code> 或 <code>&#39;serve&#39;</code> 模式时调用,也就是在<strong>预览</strong>或<strong>构建期</strong>间有条件地应用</p><p>列举一些插件,同志们可以去看看</p><p><a href="https://github.com/FatehAK/vite-plugin-image-optimizer/blob/main/src/index.ts">图片优化,压缩</a></p><p><a href="https://github.com/originjs/vite-plugins/blob/main/packages/vite-plugin-commonjs/src/index.ts">Commonjs转Esm</a></p><p>更多插件,<a href="https://github.com/vitejs/awesome-vite#plugins">自行翻阅</a></p><p><em><strong>一瓶水 一个Debugger 解决无数问题🤪</strong></em></p><p><a href="https://www.wwcattle.site/">附上最近做的一个小图标库</a>,有需要的伙伴们用起来,后面图标还会更新!</p><blockquote><p>总结: 项目中越来越多使用Vite进行构建,学习构建要同时学习<strong>Esbuild</strong>与<strong>Rollup</strong>打包工具,当然在打包过程中使用Rollup进行打包构建,还是多多少少会有性能的差异,毕竟还是使用js来.尤大 正在开发一种<strong>RollDown</strong>底层使用Rust来进行构建(包含预构建与构建过程,二者合一),狠狠期待了!<br><a href="https://www.youtube.com/watch?v=hrdwQHoAp0M&feature=youtu.be">速度应该会有飞速的提升</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-《link标签》</title>
      <link href="/2023/06/12/link%E6%A0%87%E7%AD%BE/"/>
      <url>/2023/06/12/link%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="一-发生了什么"><a href="#一-发生了什么" class="headerlink" title="一.发生了什么?"></a>一.发生了什么?</h2><p>打开控制面板,意外发现Elements,点击菜单时会往head标签中插入一个link标签. 这是用vite打包的Vue3代码,在项目中做到了按需加载组件</p><p><code>我懂,每次点击一个导航栏菜单,如果没存在该link对应的js都会添加一个link标签</code><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2c939f7199a461f95e692561bb1ce33~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>很简单嘛,只是一个简单的预加载,用到该组件会往head标签中添加一个link标签进行预加载<br>  <link rel="prefetch" as="script" crossorigin href="./index.js"></p><p>查看network会发起请求<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12c57eb0f3124a78abf07dea35c4760c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="二-思考第一个问题"><a href="#二-思考第一个问题" class="headerlink" title="二.思考第一个问题"></a>二.思考第一个问题</h2><p><code>发现问题了,不是link发起请求了,那我是不是直接在其他scipt标签中就能使用该组件中的全局的变量了?</code></p><p>平常你script标签引入第三方的资源时,如果往全局注入属性方法,那么在后面的script标签中都是可以直接使用的.</p><p>好奇心驱使我搭建了一个简单的模板进行测试一下.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demoNum<span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.js中:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> demoTitle <span class="token operator">=</span> <span class="token string">'this is test!'</span>window<span class="token punctuation">.</span>demoNum <span class="token operator">=</span> <span class="token number">2323</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> demoTitle <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df762c14ef7045baaa9bb602a1489b45~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>显示无该变量undefined,今天一定要给它输出来,我哪里做写错了! ok检查一下</p><hr><p>看了半天,这只是一个<em><strong>link发起请求,给你加载了,没有执行解析js文件啊</strong></em>,何来变量!(注意:如果是一个css文件是有去加载的,打开network会有请求)</p><p>那么问题来了,vite打包后的对应的每一个组件的js,怎么执行,肯定要执行啊,组件按需加载对应的页面dom结构也会发生改变.<br>现在的问题是怎么加载解析该<code>index.js</code>文件呢</p><p>脑海里跳出ES6的import()按需加载与动态添加scipt标签引入</p><ol><li>import()引入可以加载执行,ES6模块</li><li>动态添加script加载,不合适吧,有export的导出</li></ol><p>最终使用ES6的import()按需加载.不懂的同学自行查看阮一峰的<br><a href="https://es6.ruanyifeng.com/#docs/module#import">Module 的语法 - ECMAScript 6入门 (ruanyifeng.com)</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token operator">&lt;</span>script<span class="token operator">></span>   <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>demoTitle<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demoNum<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看结果:<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db4705dadf141159d53a28dcfd286fb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>果真导出的属性方法,全局的变量都输出来了,确定是可以了</p><blockquote><p>初步总结:如果该link标签上有rel=”preload”（或rel=”modulepreload”），则表示预加载请求，请求但不运行脚本。</p></blockquote><h2 id="三-思考第二个问题"><a href="#三-思考第二个问题" class="headerlink" title="三.思考第二个问题"></a>三.思考第二个问题</h2><p><code>又有问题来了,那么vite打包过后,按需加载组件,那要怎么去加载该组件对应的js文件呢~ 事实证明确实在Vite底层打包时也是这样加载对应的js文件。</code></p><p>看下图打包的源码:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa8fb65f1fe74b61accd1aa75d1eeb4c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>只是截了一小段图,我们只需要查看关键代码.从图中可以看到打包出的代码,按需加载组件js也是利用import()来实现.</p><h2 id="四-思考第三个问题"><a href="#四-思考第三个问题" class="headerlink" title="四.思考第三个问题"></a>四.思考第三个问题</h2><p><code>脑海又闪过一个异步组件的概念,我们知道在Vue3中知道“defineAsyncComponent“ 也是可以异步加载组件,并且在打包时,会单独打包成一个js文件.其原理又是怎样的呢!</code></p><p>直接模板动手实践下,快速创建一个vite+Vue3模板,其在app.vue中:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineAsyncComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">const</span> testCom <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/testCom.vue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>test<span class="token operator">-</span>Com <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yarn build后,查看dist源码目录:<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/611cc08908b44842bbcbdd123cdb5e40~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们可以看到确实是打包成单独的testCom.js文件</p><p>在主入口index.js看看是咋样引入的<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93a72fa9f83341c0a00a3351333ce7b9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>可以看到也是利用import()去加载的.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>所以总结Vite打包后,异步组件,单独打包成一个js文件,之后动态添加link标签预加载,当有需要时使用import()导入模块,运行解析</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript大全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebStocket导航图</title>
      <link href="/2022/12/01/WebSocket/"/>
      <url>/2022/12/01/WebSocket/</url>
      
        <content type="html"><![CDATA[<p>在本篇文章之前，<code>WebSocket</code>很多人听说过，没见过，没用过，以为是个很高大上的技术，实际上这个技术并不神秘，可以说是个很容易就能掌握的技术，希望在看完本文之后，马上把文中的栗子拿出来自己试一试，实践出真知。</p><h3 id="WebSocket解决了什么问题："><a href="#WebSocket解决了什么问题：" class="headerlink" title="WebSocket解决了什么问题："></a><code>WebSocket</code>解决了什么问题：</h3><p>客户端(浏览器)和服务器端进行通信，只能由客户端发起<code>ajax</code>请求，才能进行通信，服务器端无法主动向客户端推送信息。</p><p>当出现类似体育赛事、聊天室、实时位置之类的场景时，客户端要获取服务器端的变化，就只能通过轮询(定时请求)来了解服务器端有没有新的信息变化。</p><blockquote><p>轮询效率低，非常浪费资源(需要不断发送请求，不停链接服务器)</p></blockquote><p><strong>WebSocket的出现，让服务器端可以主动向客户端发送信息，使得浏览器具备了实时双向通信的能力,这就是<code>WebSocket</code>解决的问题</strong></p><h3 id="一个超简单的栗子："><a href="#一个超简单的栗子：" class="headerlink" title="一个超简单的栗子："></a>一个超简单的栗子：</h3><p><strong>新建一个<code>html</code>文件，将本栗子找个地方跑一下试试，即可轻松入门<code>WebSocket</code>：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">socketConnect</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 客户端与服务器进行连接</span>    <span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回`WebSocket`对象，赋值给变量ws</span>    <span class="token comment">// 连接成功回调</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'连接成功'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'我发送消息给服务端'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 客户端与服务器端通信</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 监听服务器端返回的信息</span>    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器端返回：'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment">// do something</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ws<span class="token punctuation">;</span> <span class="token comment">// 返回websocket对象</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> wsValue <span class="token operator">=</span> <span class="token function">socketConnect</span><span class="token punctuation">(</span><span class="token string">'ws://121.40.165.18:8800'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// websocket对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述栗子中<code>WebSocket</code>的接口地址出自：<a href="https://link.juejin.cn/?target=http://www.blue-zero.com/WebSocket/" title="http://www.blue-zero.com/WebSocket/">WebSocket 在线测试</a>，在开发的时候也可以用于测试后端给的地址是否可用。</p><h3 id="webSocket的class类："><a href="#webSocket的class类：" class="headerlink" title="webSocket的class类："></a>webSocket的class类：</h3><p>当项目中很多地方使用WebSocket，把它封成一个class类，是更好的选择。</p><p><strong>下面的栗子，做了非常详细的注释，建个html文件也可直接使用</strong>，websocket的常用<code>API</code>都放进去了。</p><p><strong>下方注释的代码，先不用管，涉及到心跳机制，用于保持WebSocket连接的</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">WebSocketClass</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @description: 初始化实例属性，保存参数     * @param &#123;String&#125; url ws的接口     * @param &#123;Function&#125; msgCallback 服务器信息的回调传数据给函数     * @param &#123;String&#125; name 可选值 用于区分ws，用于debugger     */</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> msgCallback<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msgCallback <span class="token operator">=</span> msgCallback<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// websocket对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// websocket是否关闭</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 初始化 连接websocket或重连webSocket时调用     * @param &#123;*&#125; 可选值 要传的数据     */</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 新建 WebSocket 实例</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 连接ws成功回调</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'open'</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">连接成功</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            <span class="token comment">// this.heartCheck();</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 有要传的数据,就发给后端</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 监听服务器端返回的信息</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 把数据传给回调函数，并执行回调</span>            <span class="token comment">// if (e.data === 'pong') &#123;</span>            <span class="token comment">//     this.pingPong = 'pong'; // 服务器端返回pong,修改pingPong的状态</span>            <span class="token comment">// &#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">msgCallback</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// ws关闭回调</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeHandle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否关闭</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// ws出错回调</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeHandle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否关闭</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// heartCheck() &#123;</span>    <span class="token comment">//     // 心跳机制的时间可以自己与后端约定</span>    <span class="token comment">//     this.pingPong = 'ping'; // ws的心跳机制状态值</span>    <span class="token comment">//     this.pingInterval = setInterval(() => &#123;</span>    <span class="token comment">//         if (this.ws.readyState === 1) &#123;</span>    <span class="token comment">//             // 检查ws为链接状态 才可发送</span>    <span class="token comment">//             this.ws.send('ping'); // 客户端发送ping</span>    <span class="token comment">//         &#125;</span>    <span class="token comment">//     &#125;, 10000)</span>    <span class="token comment">//     this.pongInterval = setInterval(() => &#123;</span>    <span class="token comment">//         if (this.pingPong === 'ping') &#123;</span>    <span class="token comment">//             this.closeHandle('pingPong没有改变为pong'); // 没有返回pong 重启webSocket</span>    <span class="token comment">//         &#125;</span>    <span class="token comment">//         // 重置为ping 若下一次 ping 发送失败 或者pong返回失败(pingPong不会改成pong)，将重启</span>    <span class="token comment">//         console.log('返回pong')</span>    <span class="token comment">//         this.pingPong = 'ping'</span>    <span class="token comment">//     &#125;, 20000)</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// 发送信息给服务器</span>    <span class="token function">sendHandle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">发送消息给服务器:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">closeHandle</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token string">'err'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 因为webSocket并不稳定，规定只能手动关闭(调closeMyself方法)，否则就重连</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token string">'close'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">断开，重连websocket</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>            <span class="token comment">// if (this.pingInterval !== undefined &amp;&amp; this.pongInterval !== undefined) &#123;</span>            <span class="token comment">//     // 清除定时器</span>            <span class="token comment">//     clearInterval(this.pingInterval);</span>            <span class="token comment">//     clearInterval(this.pongInterval);</span>            <span class="token comment">// &#125;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重连</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">websocket手动关闭</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 手动关闭WebSocket</span>    <span class="token function">closeMyself</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">关闭</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">'close'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">someFn</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接收服务器消息的回调：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// const wsValue = new WebSocketClass('ws://121.40.165.18:8800', someFn, 'wsName'); // 这个链接一天只能发送消息50次</span><span class="token keyword">const</span> wsValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketClass</span><span class="token punctuation">(</span><span class="token string">'wss://echo.websocket.org'</span><span class="token punctuation">,</span> someFn<span class="token punctuation">,</span> <span class="token string">'wsName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阮一峰老师教程链接</span>wsValue<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'立即与服务器通信'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连接服务器</span><span class="token comment">// setTimeout(() => &#123;</span><span class="token comment">//     wsValue.sendHandle('传消息给服务器')</span><span class="token comment">// &#125;, 1000);</span><span class="token comment">// setTimeout(() => &#123;</span><span class="token comment">//     wsValue.closeMyself(); // 关闭ws</span><span class="token comment">// &#125;, 10000)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栗子里面我直接写在了一起，可以把<code>class</code>放在一个js文件里面,<code>export</code>出去，然后在需要用的地方再<code>import</code>进来，把参数传进去就可以用了。</p><h2 id="WebSocket不稳定"><a href="#WebSocket不稳定" class="headerlink" title="WebSocket不稳定"></a>WebSocket不稳定</h2><p>WebSocket并不稳定，在使用一段时间后，可能会断开连接，貌似至今没有一个为何会断开连接的公论，所以我们需要让WebSocket保持连接状态，这里推荐两种方法。</p><h3 id="WebSocket设置变量，判断是否手动关闭连接："><a href="#WebSocket设置变量，判断是否手动关闭连接：" class="headerlink" title="WebSocket设置变量，判断是否手动关闭连接："></a>WebSocket设置变量，判断是否手动关闭连接：</h3><p><strong><code>class</code>类中就是用的这种方式</strong>:设置一个变量，在webSocket关闭/报错的回调中，判断是不是手动关闭的，如果不是的话，就重新连接，这样做的优缺点如下：</p><ul><li>  优点：请求较少(相对于心跳连接)，易设置。</li><li>  缺点：可能会导致丢失数据,在断开重连的这段时间中，恰好双方正在通信。</li></ul><h3 id="WebSocket心跳机制："><a href="#WebSocket心跳机制：" class="headerlink" title="WebSocket心跳机制："></a>WebSocket心跳机制：</h3><blockquote><p>因为第一种方案的缺点，并且可能会有其他一些未知情况导致断开连接而没有触发Error或Close事件。这样就导致实际连接已经断开了，而客户端和服务端却不知道，还在傻傻的等着消息来。</p></blockquote><p>然后聪明的程序猿们想出了一种叫做<strong>心跳机制</strong>的解决方法：</p><p>客户端就像心跳一样每隔固定的时间发送一次<code>ping</code>，来告诉服务器，我还活着，而服务器也会返回<code>pong</code>，来告诉客户端，服务器还活着。</p><p><strong>具体的实现方法，在上面<code>class</code>的注释中，将其打开，即可看到效果</strong>。</p><h2 id="关于WebSocket"><a href="#关于WebSocket" class="headerlink" title="关于WebSocket"></a>关于WebSocket</h2><p>怕一开始就堆太多文字性的内容，把各位吓跑了，现在大家已经会用了，我们再回头来看看WebSocket的其他知识点。</p><h3 id="WebSocket的当前状态-WebSocket-readyState"><a href="#WebSocket的当前状态-WebSocket-readyState" class="headerlink" title="WebSocket的当前状态:WebSocket.readyState"></a>WebSocket的当前状态:<code>WebSocket.readyState</code></h3><p>下面是<code>WebSocket.readyState</code>的四个值(四种状态)：</p><ul><li>  0: 表示正在连接</li><li>  1: 表示连接成功，可以通信了</li><li>  2: 表示连接正在关闭</li><li>  3: 表示连接已经关闭，或者打开连接失败</li></ul><p>我们可以利用当前状态来做一些事情，比如上面栗子中当WebSocket链接成功后，才允许客户端发送<code>ping</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 检查ws为链接状态 才可发送</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ping'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 客户端发送ping</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WebSocket还可以发送-接收-二进制数据"><a href="#WebSocket还可以发送-接收-二进制数据" class="headerlink" title="WebSocket还可以发送/接收 二进制数据"></a><code>WebSocket</code>还可以发送/接收 二进制数据</h3><p>这里我也没有试过，我是看阮一峰老师的<a href="https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2017/05/websocket.html" title="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket教程</a>才知道有这么个东西，有兴趣的可以再去谷歌，大家知道一下就可以。</p><p>二进制数据包括：<code>blob</code>对象和<code>Arraybuffer</code>对象，所以我们需要分开来处理。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">    <span class="token comment">// 接收数据</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token keyword">instanceof</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 判断 ArrayBuffer 对象</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Blob</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 判断 Blob 对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 发送 Blob 对象的例子</span><span class="token keyword">let</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="file"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送 ArrayBuffer 对象的例子</span><span class="token keyword">var</span> img <span class="token operator">=</span> canvas_context<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>binary<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果你要发送的二进制数据很大的话，如何判断发送完毕：</strong></p><p><code>webSocket.bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发送完毕</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发送还没结束</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述栗子出自阮一峰老师的<a href="https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2017/05/websocket.html" title="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket教程</a></p><h3 id="WebSocket的优点："><a href="#WebSocket的优点：" class="headerlink" title="WebSocket的优点："></a>WebSocket的优点：</h3><p>最后再吹一波WebSocket：</p><ol><li><p> 双向通信(一开始说的，也是最重要的一点)。</p></li><li><p>数据格式比较轻量，性能开销小，通信高效</p><p> 协议控制的数据包头部较小，而HTTP协议每次通信都需要携带完整的头部</p></li><li><p> 更好的二进制支持</p></li><li><p> 没有同源限制，客户端可以与任意服务器通信</p></li><li><p>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> WebStocket大全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebStocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期</title>
      <link href="/2022/12/01/react%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/12/01/react%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="类组件生命钩子："><a href="#类组件生命钩子：" class="headerlink" title="类组件生命钩子："></a>类组件生命钩子：</h1><ol><li><p>componentWillMount<br>初始化状态使用；<br>版本<br>16.2 节点 fiber 优化（引入新的 UNSAFE_componentWillMount）<br>16.8 节点 引入 hooks</p></li><li><p>render</p><blockquote><p>注意 ⚠️ 不要在 render 进行修改状态 state 中的属性，会有错误 （无限循环调用）</p></blockquote></li><li><p>componentDidMount （像 better scroll 需要 dom 成型）</p></li><li><p>componentWillUpdate（执行频率多）</p></li></ol><p>UNSAFE_componentWillUpdate<br>更新之前</p><blockquote><p>注意 ⚠️ 当然你同时修改的多个 state 中的状态时，只会执行一次 componentWillUpdate</p></blockquote><ol start="5"><li>componentDidUpdate<br>更新之后 形参是老的props 和state</li></ol><p>如果修改 state 的值的话，会执行 componentWillUpdate-&gt;render-&gt;componentDidUpdate</p><blockquote><p>注意 ⚠️ 不要在 render 进行修改状态 state 中的属性，会有错误 （无限循环调用）</p></blockquote><p>6.shouldComponentUpdate 是否当 state 发生变化需要执行 render 和 update</p><p>在这个生命周期中 形参，参数得到的值时最新的props值</p><blockquote><p>形参 a=&gt;代表修改的值（注意是修改后的值） ，此时再根据判断是否要更新 render 渲染函数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">//表示修改后的值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token comment">//之前的props是还没发生变化的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>index <span class="token operator">===</span> data<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div        style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>          border<span class="token operator">:</span> <span class="token string">"1px solid red"</span><span class="token punctuation">,</span>          width<span class="token operator">:</span> <span class="token string">"200px"</span><span class="token punctuation">,</span>          height<span class="token operator">:</span> <span class="token string">"200px"</span><span class="token punctuation">,</span>          textAlign<span class="token operator">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>          background<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index <span class="token operator">?</span> <span class="token string">"red"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      books<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"一句顶万句"</span><span class="token punctuation">,</span>        <span class="token string">"草丛生睦邻"</span><span class="token punctuation">,</span>        <span class="token string">"独侠人"</span><span class="token punctuation">,</span>        <span class="token string">"一句顶万句1"</span><span class="token punctuation">,</span>        <span class="token string">"草丛生睦邻2"</span><span class="token punctuation">,</span>        <span class="token string">"独侠人3"</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      item<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        text<span class="token operator">:</span> <span class="token string">"&lt;span>innerthml&lt;/span>"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      current<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input          onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> current<span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>input<span class="token operator">></span>        <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>current<span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>ul style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> display<span class="token operator">:</span> <span class="token string">"flex"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>            <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Box                  current<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                  index<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>                  key<span class="token operator">=</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">&#125;</span>                <span class="token operator">></span>                  <span class="token punctuation">&#123;</span>val<span class="token punctuation">&#125;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Box<span class="token operator">></span>              <span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意⚠️：当你修改响应state的值时，最终修改后的 值 只能可以在 render中和生命周期<code>componentDidUpdate</code>中取到</p><p>7.UNSAFE_componentWillUpdate 当父组件传过来的props时发生变化时触发。</p><p>8.UNSAFE_componentWillReceiveProps 当父组件把prop的值传过来的时候，就会立即执行一次，等到props 值发生变化就会再次执行</p><p>9.getDerivedStateFromProps 父组件中传入子组件中，一开始就会执行，等到state。</p><p>10.getSnapshotBeforeUpdate 该生命周期是render与update之中的执行的 ，可以在该声明周期中获取旧的dom</p><p>11.优化生命周期<br>shouldComponentUpdate和PureComponent （state如果一定变化就不用这个生命周期，shallowUpdate也要花时间）<br>12.</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React知识简单梳理</title>
      <link href="/2022/01/12/react%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/01/12/react%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文会把react使用过程中的知识点做一下梳理。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>参考<a href="https://link.juejin.cn/?target=https://7kms.github.io/react-illustration-series/" title="https://7kms.github.io/react-illustration-series/">图解React原理</a>。</p><h3 id="几个包"><a href="#几个包" class="headerlink" title="几个包"></a>几个包</h3><p>在react使用过程中比较重要的包</p><ul><li>  react</li><li>  react-dom</li><li>  react-reconciler</li><li>  scheduler</li></ul><p>react-dom提供一个api启动项目，react提供了其他绝大部分api来具体操作react。<br>react-dom通过schedulerUpdateOnFiber发起更新请求。<br>reconciler处理并将fiber树创建的逻辑封装成回调交给scheduler调度处理，返回新的fiber树，提交给react-dom渲染到屏幕上。</p><h3 id="常见对象"><a href="#常见对象" class="headerlink" title="常见对象"></a>常见对象</h3><p>ReactElement, Fiber, DOM 三者的关系： reactElement，所有jsx的节点都会被babal转化React.createElement，创建一个ReactElement对象.每个reactElement生成一个内存中的fiber节点，fiber节点生成fiber树，fiber树对应dom树。</p><p><a href="https://link.juejin.cn/?target=https://7kms.github.io/react-illustration-series/main/object-structure%23reactelement-%25E5%25AF%25B9%25E8%25B1%25A1" title="https://7kms.github.io/react-illustration-series/main/object-structure#reactelement-%E5%AF%B9%E8%B1%A1">ReactElement</a>对象属性包括</p><ul><li>  type属性表示节点的种类，比如字符串，即span等dom节点，函数，比如function和class组件，还有react节点类型，比如portal,context,fragment，会在reconciler等以不同方式处理。</li><li>  key属性，用于diff，默认null</li><li>  props属性</li></ul><p><a href="https://link.juejin.cn/?target=https://7kms.github.io/react-illustration-series/main/object-structure%23fiber-%25E5%25AF%25B9%25E8%25B1%25A1" title="https://7kms.github.io/react-illustration-series/main/object-structure#fiber-%E5%AF%B9%E8%B1%A1">Fiber</a>用来在内存中表示dom节点，除了首次渲染，内存中维护两个fiber树，属性包括</p><ul><li>  stateNode 对应的dom节点</li><li>  updatequeue，一个链表存储的更新队列，每一次发起更新, 都需要在该队列上创建一个update对象</li><li>  memoizedState 上一次生成子节点之后保持在内存中的局部状态，在函数组件中指Hook队列</li></ul><h3 id="react运行过程"><a href="#react运行过程" class="headerlink" title="react运行过程"></a>react运行过程</h3><p>包括首次启动和二次渲染，两者的触发和render阶段（目前的这个阶段不可中断，同步模式）不同，commit阶段相同。</p><h4 id="启动的触发"><a href="#启动的触发" class="headerlink" title="启动的触发"></a>启动的触发</h4><p>17.2中，有三种启动方式，后两种稳定版本不提供</p><ul><li>  legacy 当前的方式，不支持concurrency</li><li>  block 过渡版本</li><li>  currency 全部功能</li></ul><p>启动过程中初始化项目，主要创建了三个对象</p><ul><li>  ReactDOM(Blocking)Root，包含render等方法，引导react启动</li><li>  fiberRoot 包含fiber构建过程中的状态，通过前一个的_internalRoot属性访问</li><li>  HostRootFiber 第一个fiber对象，通过前一个的current属性访问，它的子节点是App reactelement对应的fiber节点</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/054da90110bb4c70b799c82202f89cd8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1023&h=368&s=13688&e=webp&b=fefefe" alt="image.png"> 启动完了更新容器updateContainer</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">legacyRenderSubtreeIntoContainer</span><span class="token punctuation">(</span>  <span class="token parameter">parentComponent<span class="token operator">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">,</span>  children<span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>  container<span class="token operator">:</span> Container<span class="token punctuation">,</span>  forceHydrate<span class="token operator">:</span> boolean<span class="token punctuation">,</span>  callback<span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> root<span class="token operator">:</span> RootType <span class="token operator">=</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>_reactRootContainer<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> fiberRoot<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初次调用, root还未初始化, 会进入此分支</span>    <span class="token comment">//1. 创建ReactDOMRoot对象, 初始化react应用环境</span>    root <span class="token operator">=</span> container<span class="token punctuation">.</span>_reactRootContainer <span class="token operator">=</span> <span class="token function">legacyCreateRootFromDOMContainer</span><span class="token punctuation">(</span>      container<span class="token punctuation">,</span>      forceHydrate<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    fiberRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>_internalRoot<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> originalCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>      <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// instance最终指向 children(入参: 如&lt;App/>)生成的dom节点</span>        <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getPublicRootInstance</span><span class="token punctuation">(</span>fiberRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">originalCallback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2. 更新容器</span>    <span class="token function">unbatchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">updateContainer</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> fiberRoot<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// root已经初始化, 二次调用render会进入</span>    <span class="token comment">// 1. 获取FiberRoot对象</span>    fiberRoot <span class="token operator">=</span> root<span class="token punctuation">.</span>_internalRoot<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> originalCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>      <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getPublicRootInstance</span><span class="token punctuation">(</span>fiberRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">originalCallback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2. 调用更新</span>    <span class="token function">updateContainer</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> fiberRoot<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">getPublicRootInstance</span><span class="token punctuation">(</span>fiberRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建update加入队列并进一步调用scheduleUpdateOnFiber进入reconciler阶段</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ... 省略了部分代码</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>  <span class="token parameter">element<span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>  container<span class="token operator">:</span> OpaqueRoot<span class="token punctuation">,</span>  parentComponent<span class="token operator">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">,</span>  callback<span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取当前时间戳</span>  <span class="token keyword">const</span> current <span class="token operator">=</span> container<span class="token punctuation">.</span>current<span class="token punctuation">;</span>  <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1. 创建一个优先级变量(车道模型)</span>  <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2. 根据车道优先级, 创建update对象, 并加入fiber.updateQueue.pending队列</span>  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>  update<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span> element <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  callback <span class="token operator">=</span> callback <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> callback<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. 进入reconcier运作流程中的`输入`环节</span>  <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> lane<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二次渲染的触发"><a href="#二次渲染的触发" class="headerlink" title="二次渲染的触发"></a>二次渲染的触发</h4><p>setState和dispatchAction都会创建update对象，并添加到Fiber节点的updateQueue队列，然后调用scheduleUpdateOnFiber，进入reconciler中。</p><p>在shedule相关逻辑中，具体的任务由ensureRootIsScheduled组织，保证每个root只有一个任务，该任务会作为一个回调作为另一个宏任务（由<a href="https://link.juejin.cn/?target=https://segmentfault.com/a/1190000022942008" title="https://segmentfault.com/a/1190000022942008">MessageChannel</a>实现）在当前同步代码执行结束执行。 当当前同步代码多次调用setState时，如果新旧回调优先级一样，则会复用之前的任务，多次更新一起处理，否则取消之前的任务新建新的任务。</p><p>只要祖先组件重新渲染，子组件就默认重渲染,参考<a href="https://link.juejin.cn/?target=https://www.debugbear.com/blog/react-rerenders" title="https://www.debugbear.com/blog/react-rerenders">Optimizing React performance by preventing unnecessary re-renders</a></p><h5 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h5><p>前面提的当调用多个状态更新时节流到一次重渲染，这种节流在v18之前，只适用于react事件处理器，其他比如在promise中、定时器中或原生事件处理器中时，不会批量处理。在v18以后，这些都会批零处理，使用<code>flushSync</code>可以显式同步更新。</p><h4 id="render阶段"><a href="#render阶段" class="headerlink" title="render阶段"></a>render阶段</h4><p>入口为scheduleUpdateOnFiber，如果优先级为同步，则直接构建fiber树，否则注册一个任务按调度执行。</p><p>render阶段构建fiber树，这个阶段分beginWork和completeWork两步，前一步从hostrootfiber开始进行深度优先遍历为每个fiber节点生成表示各种副作用的flags，后一步从叶子节点返回，也会生成update等flags，并将所有flags连成一个effectlist供commit阶段处理。</p><p>当首次渲染时内存中没有可对比的fiber树，beginwork阶段根据ReactElement创建对应的fiber节点，二次渲染时，要通过reactElement和current树的对比来决定怎么生成新的fiber节点以及添加flags。</p><p>这里的对比过程具体为: 比较current tree上的fiber节点和新的reactELement，对于单个节点，如果是新增的直接新建，否则比较type决定是否复用，对于子节点，分别对比type和key（默认为null）决定复用规则，打上flags。</p><h4 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h4><p>fibertree构建完成调用commit tree，这个过程主要是分为三批处理带有各种标记的副作用，其中第二批将新生成的fiber树对应的dom树渲染到屏幕上。</p><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><p>hook主要用于处理函数组件的状态和副作用，每个fiber节点在memoizedState上挂载了一个hook链表，该链表根据在组件出现的顺序排列，当进行新的fiber树构建时，直接复制到新的树上。</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>在根dom元素上监听除了scroll等事件外的子元素事件</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>组件有两种写法，模板和jsx（这里等效于相应render函数），其中模板的语法固定，能够对性能深度优化，jsx就是js，写法很灵活。</p><p>svelte为代表的library是用模板，react为代表的是用jax，vue都支持，但性能原因推荐模板。</p><p>拆分组件时可以像拆分函数一样，使用单一职责原则。</p><p>组件的写法在react中包括class组件和函数组件。</p><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>是使用该组件时的参数，另外props.children表示组件使用时两个tag中间包含的内容。 props是只读的。</p><p>当一个函数直接传入（而不是作为值传入）时，每次渲染都是<a href="https://link.juejin.cn/?target=https://reactjs.org/docs/faq-functions.html" title="https://reactjs.org/docs/faq-functions.html">新的函数</a>.</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>ref表示一个到dom元素或react元素的引用，可以在父组件创建然后使用React.forwardRef传给子组件，然后指定对应被引用对象。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li> 创建ref，这里推荐使用const refContainer= useRef(initialValue)</li></ol><p>其是一个可变的对象，可以通过.current获取保存的值，在这里用来保存一个dom元素，当然也可以保存其他想保存的数据，ref变化不会引起组件重新渲染。</p><p>另外可以使用等效的React.createRef()</p><ol start="2"><li> 添加ref,当用于dom元素时直接将ref添加到其ref属性上即可，用于react元素时由于没有实例，因此不能直接用,需要借助useImperativeHandle(ref, createHandle, [deps]) 其中createHandle是一个函数，其返回值赋值给ref，提供给父组件调用，比如</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FancyInput</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">focus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>inputRef<span class="token punctuation">&#125;</span> <span class="token operator">...</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>FancyInput <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>FancyInput<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在当前组件创建一个ref指定dom元素，从而在父组件间接操作子组件内的dom元素。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">复制代码<span class="token operator">&lt;</span>FancyInput ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>inputRef<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="当作数据容器"><a href="#当作数据容器" class="headerlink" title="当作数据容器"></a>当作数据容器</h4><p>组件的单次渲染中，state和props是一个固定值，如果我们想获取其他渲染时期的数据，可以使用ref。</p><p>比如获取上次渲染的，其中useEffect会在state和衍生的ui更新完以后执行，因此当页面渲染时，ref中保存的还是上次渲染后赋值的。<br>等useEffect执行后ref被修改，但不会触发渲染，因此ui上还是上次渲染的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">复制代码<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> prevCountRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    prevCountRef<span class="token punctuation">.</span>current <span class="token operator">=</span> count<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> prevCount <span class="token operator">=</span> prevCountRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Now<span class="token operator">:</span> <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> before<span class="token operator">:</span> <span class="token punctuation">&#123;</span>prevCount<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如读取未来渲染时期的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> latestCount <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Set the mutable latest value</span>    latestCount<span class="token punctuation">.</span>current <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Read the mutable latest value</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>latestCount<span class="token punctuation">.</span>current<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="callback-ref"><a href="#callback-ref" class="headerlink" title="callback ref"></a>callback ref</h4><p>当将ref指定为函数时，这被称为callback ref</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">复制代码  <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>inputRef<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会在绑定和解除绑定时调用,参数是对应dom元素和null，在重新渲染时不会调用，如果想监控dom元素的变化，可以使用ResizeObserver</p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>组件包含内部状态，状态是组件某一时刻的数据快照，状态改变会引起组件重新渲染。</p><p>函数组件的状态包括三个来源</p><ul><li>  自身</li><li>  props</li><li>  context</li></ul><p>函数组件的状态通常使用hook处理。</p><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><p>使用方法如</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中参数是该state初始值，可以是一个值或返回值得函数，返回一个数组，分别表示当前变量和修改当前变量的函数。</p><p>当修改当前变量时可以直接将新值传给setState，也可以传一个函数，其中参数是上一个值.</p><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于依赖多个值或依赖之前的值的场景，也可以将dispatch作为props传给子组件。</p><p>其中第一个参数是reducer，即(state, action) =&gt; newState，第二个参数是初始值，如果要懒计算，初始值是init(initialArg)</p><p>action包括type和其他自定义字段。</p><p>返回，state和dispatch.</p><p>useState是useReducer的一种特殊情况.</p><h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><p>用于为多层的多个组件提供state,使用context时使用不当会造成不必要的渲染，可以将context细粒化，或直接使用redux,可参考<a href="https://link.juejin.cn/?target=https://www.jianshu.com/p/4a41d04c8e48" title="https://www.jianshu.com/p/4a41d04c8e48">如何有效减少使用useContext导致的不必要渲染</a></p><p>1.创建context</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认值会在没有匹配的provider时使用</p><ol start="2"><li> 用来挂载context</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token comment">/* some value */</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提供值给子组件消费，provider可以嵌套并进行覆盖。</p><p>3.订阅context 可以使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>  <span class="token punctuation">&#123;</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token comment">/* render something based on the context value */</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>MyContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>比如</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ThemeContext<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./theme-context'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ThemeTogglerButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// The Theme Toggler Button receives not only the theme</span>  <span class="token comment">// but also a toggleTheme function from the context</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>theme<span class="token punctuation">,</span> toggleTheme<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>button          onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>toggleTheme<span class="token punctuation">&#125;</span>          style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>backgroundColor<span class="token operator">:</span> theme<span class="token punctuation">.</span>background<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>          Toggle Theme        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用hook</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h3><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span>didUpdate<span class="token punctuation">,</span><span class="token punctuation">[</span>dependences<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来当state更新后执行副作用。 在react中，每次渲染都有它自己的数据，包括state和函数，每次渲染都可以看成是一次函数的分别调用。</p><p>disUpdate是个函数，函数体是执行的副作用，会在页面渲染后执行，如果有返回值，会执行一些清理作用，会在下次渲染结束执行然后执行新的effect。</p><p>这里整理一下完整的执行步骤</p><ol><li> 状态变化</li><li> 函数组件执行，组件中涉及到状态的地方会被换成当前state</li><li> 更新ui</li><li> 清理上一次effect</li><li> 执行新的effect</li></ol><p>第二个参数是个依赖项，只有依赖项有变化时才会引起effect调用。</p><h4 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h4><p>会在元素更新完，但还没渲染时同步调用，从而阻塞渲染</p><h4 id="父子组件执行顺序"><a href="#父子组件执行顺序" class="headerlink" title="父子组件执行顺序"></a>父子组件执行顺序</h4><pre class="line-numbers language-none"><code class="language-none">javascript复制代码import &#123; useState, useEffect, useLayoutEffect &#125; from &#39;react&#39;export default function RenderOrder() &#123;  const [state, setState] &#x3D; useState(0)  useEffect(() &#x3D;&gt; &#123;    console.log(&#39;parents effect&#39; + state)  &#125;, [state])  useLayoutEffect(() &#x3D;&gt; &#123;    console.log(&#39;parents layout effect&#39; + state)  &#125;, [state])  console.log(&#39;parent exec&#39; + state)  return (    &lt;div&gt;      &lt;button onClick&#x3D;&#123;() &#x3D;&gt; setState((c) &#x3D;&gt; c + 1)&#125;&gt;change&lt;&#x2F;button&gt;      &lt;Children state&#x3D;&#123;state&#125; &#x2F;&gt;      &#123;state&#125;    &lt;&#x2F;div&gt;  )&#125;function Children(&#123; state &#125;: &#123; state: number &#125;) &#123;  useEffect(() &#x3D;&gt; &#123;    console.log(&#39;child effect&#39; + state)  &#125;, [state])  useLayoutEffect(() &#x3D;&gt; &#123;    console.log(&#39;child layout effect&#39; + state)  &#125;, [state])  console.log(&#39;child exec&#39; + state)  return &lt;div&gt;children&#123;state&#125;&lt;&#x2F;div&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行顺序是函数组件执行时先父后子，副作用先子后父 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78fed5ca5f3448a7814a58470ca983d4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=531&h=331&s=14624&e=webp&b=fefcfc" alt="image.png"></p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>  fn<span class="token punctuation">,</span>  <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将一个函数缓存</p><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p>将一个值缓存</p><pre class="line-numbers language-none"><code class="language-none">scss复制代码const memoizedValue &#x3D; useMemo(() &#x3D;&gt; computeExpensiveValue(a, b), [a, b]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>useCallback(fn, deps)</code> is equivalent to <code>useMemo(() =&gt; fn, deps)</code>,前者是后者的特殊情况。</p><h4 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h4><p>作用类似于shouldComponentUpdate()</p><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><h4 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h4><p>这里提供一个在挂载dom元素以外渲染节点的方式</p><pre class="line-numbers language-none"><code class="language-none">scss复制代码ReactDOM.createPortal(child, container)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中第一个参数表示可以作为children的参数，比如string，元素或fragment。</p><p>除了渲染位置，其他和正常写法一致。</p><h4 id="Transitions"><a href="#Transitions" class="headerlink" title="Transitions"></a>Transitions</h4><p>用来区分紧急的和非紧急的需求。<br>紧急的交互比如输入、点击等，非紧急的比如切换ui。<br>在<code>startTransition</code>中的处理可以被紧急的更新打断，另外还提供了一个hook<code>useTransition</code></p><pre class="line-numbers language-none"><code class="language-none">javascript复制代码function App() &#123;  const [isPending, startTransition] &#x3D; useTransition();  const [count, setCount] &#x3D; useState(0);    function handleClick() &#123;    startTransition(() &#x3D;&gt; &#123;      setCount(c &#x3D;&gt; c + 1);    &#125;)  &#125;  return (    &lt;div&gt;      &#123;isPending &amp;&amp; &lt;Spinner &#x2F;&gt;&#125;      &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;&#123;count&#125;&lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h4><p>目前和<code>React.lazy</code>一起使用用来提示loading</p><pre class="line-numbers language-none"><code class="language-none">javascript复制代码&#x2F;&#x2F; This component is loaded dynamicallyconst OtherComponent &#x3D; React.lazy(() &#x3D;&gt; import(&#39;.&#x2F;OtherComponent&#39;));function MyComponent() &#123;  return (    &#x2F;&#x2F; Displays &lt;Spinner&gt; until OtherComponent loads    &lt;React.Suspense fallback&#x3D;&#123;&lt;Spinner &#x2F;&gt;&#125;&gt;      &lt;div&gt;        &lt;OtherComponent &#x2F;&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;React.Suspense&gt;  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当同时有Transitions时，loading时显示旧界面。</p><h4 id="useId"><a href="#useId" class="headerlink" title="useId"></a>useId</h4><p>用来生成id，避免hydration时的错误</p><h4 id="useDeferredValue"><a href="#useDeferredValue" class="headerlink" title="useDeferredValue"></a>useDeferredValue</h4><p>用于复制当前一个状态，在紧急更新后更新。</p><h4 id="Error-Boundaries"><a href="#Error-Boundaries" class="headerlink" title="Error Boundaries"></a>Error Boundaries</h4><p>用来捕获子组件的发生的错误，从而执行一些副作用或者展示一个回退ui。<br>注意有四个场景不会捕获</p><ol><li> 事件处理</li><li> 异步代码</li><li> ssr</li><li> 本身</li></ol><h4 id="Higher-Order-Components"><a href="#Higher-Order-Components" class="headerlink" title="Higher-Order Components"></a>Higher-Order Components</h4><p>高阶组件就是一个函数，输入一个组件，输出另一个组件</p><h4 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h4><p>通过一个值为函数的prop来共享代码</p><h4 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h4><p>用来将组件逻辑提取到一个可复用的函数，命名以use开头，使用时像使用其他hook一样。</p><p>对于react而言，使用自定义hook跟直接在组件中执行自定义hook中的代码一样</p><p>这里想强调的是自定义hook的参数没限制，且当参数变化时可以在自定义hook中使用useEffect监听。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> prevCount <span class="token operator">=</span> <span class="token function">usePrevious</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Now<span class="token operator">:</span> <span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> before<span class="token operator">:</span> <span class="token punctuation">&#123;</span>prevCount<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">usePrevious</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    ref<span class="token punctuation">.</span>current <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hook中的事件监听"><a href="#hook中的事件监听" class="headerlink" title="hook中的事件监听"></a>hook中的事件监听</h3><ul><li>  <a href="https://link.juejin.cn/?target=https://betterprogramming.pub/master-your-react-skills-with-event-listeners-ebc01dde4fad" title="https://betterprogramming.pub/master-your-react-skills-with-event-listeners-ebc01dde4fad">Master Your React Skills With Event Listeners</a></li><li>  <a href="https://link.juejin.cn/?target=https://geoffroymounier.medium.com/react-hook-optimised-scrollevent-listener-13513649a64d" title="https://geoffroymounier.medium.com/react-hook-optimised-scrollevent-listener-13513649a64d">React Hook Optimised Event Listener</a></li></ul><h2 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h2><p>class组件是一个继承了React.Component或React.PureComponent的class，这两个父类的区别是后者使用state和props的浅对比实现了shouldComponentUpdate()</p><p>新建的class必须实现render方法，用来返回待渲染的react元素。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>整体生命周期是<a href="https://link.juejin.cn/?target=https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" title="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">这样的</a>。<br>当首次渲染时依次执行</p><ul><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23constructor" title="https://zh-hans.reactjs.org/docs/react-component.html#constructor"><strong><code>constructor()</code></strong> </a>构造函数</li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23static-getderivedstatefromprops" title="https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops"><code>static getDerivedStateFromProps()</code></a> 从props上获取state，会在每次render之前执行，静态方法</li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23render" title="https://zh-hans.reactjs.org/docs/react-component.html#render"><strong><code>render()</code></strong></a></li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23componentdidmount" title="https://zh-hans.reactjs.org/docs/react-component.html#componentdidmount"><strong><code>componentDidMount()</code></strong></a></li></ul><p>更新时依次执行</p><ul><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23static-getderivedstatefromprops" title="https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromprops"><code>static getDerivedStateFromProps()</code></a></li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23shouldcomponentupdate" title="https://zh-hans.reactjs.org/docs/react-component.html#shouldcomponentupdate"><code>shouldComponentUpdate()</code></a></li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23render" title="https://zh-hans.reactjs.org/docs/react-component.html#render"><strong><code>render()</code></strong></a></li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23getsnapshotbeforeupdate" title="https://zh-hans.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate"><code>getSnapshotBeforeUpdate()</code></a> 在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期方法的任何返回值将作为参数传递给 <code>componentDidUpdate()</code>。</li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23componentdidupdate" title="https://zh-hans.reactjs.org/docs/react-component.html#componentdidupdate"><strong><code>componentDidUpdate()</code></strong></a></li></ul><p>卸载时执行</p><ul><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23componentwillunmount" title="https://zh-hans.reactjs.org/docs/react-component.html#componentwillunmount"><strong><code>componentWillUnmount()</code></strong></a></li></ul><p>发生错误时执行</p><ul><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23static-getderivedstatefromerror" title="https://zh-hans.reactjs.org/docs/react-component.html#static-getderivedstatefromerror"><code>static getDerivedStateFromError()</code></a></li><li>  <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23componentdidcatch" title="https://zh-hans.reactjs.org/docs/react-component.html#componentdidcatch"><code>componentDidCatch()</code></a></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-component.html%23other-apis" title="https://zh-hans.reactjs.org/docs/react-component.html#other-apis"></a></h3><h3 id="函数组件和class组件区别"><a href="#函数组件和class组件区别" class="headerlink" title="函数组件和class组件区别"></a>函数组件和class组件区别</h3><p>函数使用闭包捕获了每次渲染的变量，参考<a href="https://link.juejin.cn/?target=https://overreacted.io/how-are-function-components-different-from-classes/" title="https://overreacted.io/how-are-function-components-different-from-classes/"># How Are Function Components Different from Classes?</a></p><h3 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h3><p>class组件最开始是用<a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/20361937" title="https://zhuanlan.zhihu.com/p/20361937">mixin</a>，由于<a href="https://link.juejin.cn/?target=https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html" title="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html">它的一些问题</a>，现在推荐使用<a href="https://link.juejin.cn/?target=https://reactjs.org/docs/higher-order-components.html" title="https://reactjs.org/docs/higher-order-components.html">HOC</a>和<a href="https://link.juejin.cn/?target=https://reactjs.org/docs/render-props.html" title="https://reactjs.org/docs/render-props.html">Render Props</a>。</p><h2 id="不同场景下的diff方法"><a href="#不同场景下的diff方法" class="headerlink" title="不同场景下的diff方法"></a>不同场景下的diff方法</h2><ul><li>  shouldComponentUpdate <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-api.html%23reactpurecomponent" title="https://zh-hans.reactjs.org/docs/react-api.html#reactpurecomponent">用浅比较之前和之后的props和state</a></li><li>  react.memo <a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/react-api.html%23reactmemo" title="https://zh-hans.reactjs.org/docs/react-api.html#reactmemo">用浅对比对比props</a></li><li>  useState和usereducer和useEffect 用<a href="https://link.juejin.cn/?target=https://zh-hans.reactjs.org/docs/hooks-reference.html%23bailing-out-of-a-state-update" title="https://zh-hans.reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update">object.is</a></li><li>  useContext <a href="https://link.juejin.cn/?target=https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberNewContext.old.js%23L128" title="https://github.com/facebook/react/blob/12adaffef7105e2714f82651ea51936c563fe15c/packages/react-reconciler/src/ReactFiberNewContext.old.js#L128">使用object.is</a>,不会在意react.memo和shouldComponentUpdate()</li><li>  redux <a href="https://link.juejin.cn/?target=https://react-redux.js.org/api/hooks%23equality-comparisons-and-updates" title="https://react-redux.js.org/api/hooks#equality-comparisons-and-updates">使用===</a></li></ul><h3 id="浅对比"><a href="#浅对比" class="headerlink" title="浅对比"></a>浅对比</h3><p>react中经常遇到浅对比这个概念，大概步骤包括</p><ol><li> 如果Obejct.is返回true则返回true</li><li> 如果其中一个不是对象或是null返回false</li><li> 如果两者自身可枚举属性数量不同，返回false</li><li> 对每个属性使用Object.is判断是否相等</li></ol><p>详见<a href="https://link.juejin.cn/?target=https://github.com/facebook/react/blob/0e100ed00fb52cfd107db1d1081ef18fe4b9167f/packages/shared/shallowEqual.js%23L18" title="https://github.com/facebook/react/blob/0e100ed00fb52cfd107db1d1081ef18fe4b9167f/packages/shared/shallowEqual.js#L18">源码</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React通信</title>
      <link href="/2021/09/07/React%E7%88%B6%E5%AD%90%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2021/09/07/React%E7%88%B6%E5%AD%90%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="父子间的通信方法："><a href="#父子间的通信方法：" class="headerlink" title="父子间的通信方法："></a>父子间的通信方法：</h1><p>1.通过将父组件中的函数给子组件，之后在子组件中进行调用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>        类组件页面：        <span class="token operator">&lt;</span>ClassCom booleaNum<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span> addSum<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickSum<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> is content！<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.通过在父组件中 获取子组件的 ref 在调用子组件中的方法</p><h2 id="Ref-版的表单组件"><a href="#Ref-版的表单组件" class="headerlink" title="Ref 版的表单组件"></a>Ref 版的表单组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>input        value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>        onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            name<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>        类组件页面：        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>ClassCom ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>currefs<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div            onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currefs<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token operator">></span>            change          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上文我们可以看到就是在父组件上绑定一个 ref，直接可以获取 ref</p><h1 id="非父子间的通信方法"><a href="#非父子间的通信方法" class="headerlink" title="非父子间的通信方法"></a>非父子间的通信方法</h1><p>（1）首先我们运用第一种方法就是使用发布订阅模式，当然后面还有更加成熟的 redux 进行管理我们的状态<br>先看下代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 这是发布订阅简单函数，subscribe进行收集我们订阅者，publish进行派发更新</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">val</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> emit<span class="token comment">//在constructor中，进行注册，只要当值发生变化时候我们再publish</span>emit<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">names</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    names<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 典型在子组件中的文本框进行操作</span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"value"</span> ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>curref<span class="token punctuation">&#125;</span> value<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      emit<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）通过react拓展的context进行通信，消费者 comsumer  ，供应者 provider</p><p>```js<br>// 这是发布订阅简单函数，subscribe进行收集我们订阅者，publish进行派发更新<br>const emit = {<br>  list: [],<br>  subscribe(callback) {<br>    this.list.push(callback)<br>  },<br>  publish(param) {<br>    this.list.forEach((val) =&gt; val(param))<br>  },<br>}<br>export default emit</p><p>//在constructor中，进行注册，只要当值发生变化时候我们再publish<br>emit.subscribe((names) =&gt; {<br>  console.log(names)<br>  this.setState({<br>    names,<br>  })<br>})</p><p>// 典型在子组件中的文本框进行操作<br>   &lt;input type=”value” ref={this.curref} value={this.props.name} onChange={(e) =&gt; {<br>      emit.publish(e.target.value);<br>  }} /&gt;<br>``</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React开篇介绍</title>
      <link href="/2021/09/01/react%E5%BC%80%E7%AF%87/"/>
      <url>/2021/09/01/react%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>React 是前端三大框架之一，也是受开发人员比较喜欢的前端框架之一。<br>今天开始 React 之旅。<br>React 起源 2013.05 开源 Fackbook 因为对市场上的 js 框架不是很满意，就决定自己写一套</p><p>React 的特点：</p><blockquote><p>1.声明式设计</p></blockquote><blockquote><p>2.高效 vdom 减少交互 dom 回流重绘</p></blockquote><blockquote><p>3.单向响应的数据流</p></blockquote><blockquote><p>4.声明式设计</p></blockquote><hr><blockquote><p>理解 React 大致特点后，我们看下实际的操作吧。<br>React 中支持<code>函数式组件（16.8.0 无状态使用hooks）</code>与<code>类组件class</code></p></blockquote><h2 id="class-组件"><a href="#class-组件" class="headerlink" title="class 组件"></a>class 组件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"render"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>      books<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"一句顶万句"</span><span class="token punctuation">,</span> <span class="token string">"草丛生睦邻"</span><span class="token punctuation">,</span> <span class="token string">"独侠人"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      item<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        text<span class="token operator">:</span> <span class="token string">"&lt;span>innerthml&lt;/span>"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>        类组件页面：        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> is content！<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面即是一个简单的 class 组件，注意类组件中定义状态用 <code>this.state</code> 设置。</p><p>修改状态值 <code>this.setState</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"render"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>      books<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"一句顶万句"</span><span class="token punctuation">,</span> <span class="token string">"草丛生睦邻"</span><span class="token punctuation">,</span> <span class="token string">"独侠人"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      item<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        text<span class="token operator">:</span> <span class="token string">"&lt;span>innerthml&lt;/span>"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">handlerCommit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 修改state中的name 与age自增</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"xiaochen"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>        类组件页面：        <span class="token operator">&lt;</span>div<span class="token operator">></span>name<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>age<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> is content！<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handlerCommit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>change state<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上文可以发现 修改状态的 setState 修改即可，传入新的属性就可以把状态覆盖</p><blockquote><p>注意：修改一次 setState 类组件中的 render 渲染函数会重新 执行 1 次，这样会重新进行生成 vnode 之后比较打补丁<br>注意，setState 在版本 18 之前，如何同时修改多个 setState 中的属性时，会有区别 1.如果多个 setState 是在同步中执行 2.如果多个 setState 是在异步像（setTimeout 中）</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"render"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>      books<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"一句顶万句"</span><span class="token punctuation">,</span> <span class="token string">"草丛生睦邻"</span><span class="token punctuation">,</span> <span class="token string">"独侠人"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      item<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        text<span class="token operator">:</span> <span class="token string">"&lt;span>innerthml&lt;/span>"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">handlerCommitTwo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">handlerCommitOne</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>        类组件页面：        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> is content！<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handlerCommitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>hanlderCommitOne<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div          onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handlerCommitTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">></span>          hanlderCommitTwo        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上文可以知道 执行 handlerCommitOne 输出：<br><code>37 38 39</code></p><p>执行 handlerCommitTwo 输出：<br><code>37 37 37</code></p><p>记住口诀：在同步任务中执行，setState 是异步任务 并且会合并所有 setState 操作 同样的 37<br>在异步任务中执行会是异步输出 37 38 39</p><pre class="line-numbers language-none"><code class="language-none">重点说明：为了保证state中的值是正确的，后做一些操作我们应该放在setState的第二个形参handler中,看下图：this.setState((&#123;&#125;),handler)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span>    age<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"(--------+"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类组件定义事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">handlerCommit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"handlerCommit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">handlerCommitOne</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"handlerCommitOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">handlerCommitTwo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"handlerCommitTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>        类组件页面：PropProp        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token keyword">this</span> is content！<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handlerCommit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>hanlderCommit<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handlerCommitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>hanlderCommitOne<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handlerCommitTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>hanlderCommitTwo<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上文可以看到定义事件中，最好使用箭头函数才能够保证 this 的指向，使用 function 函数 使用 bind 改变 this 的指向。</p><p>如何获取 dom 元素呢！像 input 文本框中的值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span>        类组件页面：        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"value"</span> ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>curref<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上文可以发现获取一个 dom 元素，<code>this.curref=React.createRef()</code> 再用于 dom 元素上</p><p>props 属性的验证：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> kerwinPropsTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token keyword">class</span> <span class="token class-name">WWTest</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 设置booleaNum必须为布尔值</span>  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    booleaNum<span class="token operator">:</span> kerwinPropsTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认prop属性值</span>  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    wuwei<span class="token operator">:</span> <span class="token number">1111</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"contain"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WWTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过上文我们可以发现，为了限制 prop 的类型的时候我们可以使用 <code>kerwinPropTypes</code> 进行校验</p></blockquote><blockquote><p>注意 ⚠️：一个小技巧 <code>this.state</code> 可以在子组件中进行{…this.state}</p></blockquote><blockquote><p>注意 类组件的 props 只能在 render 中进行访问到,需要在下一个宏，微任务中执行</p></blockquote><p><code>Prop与State的区别</code>：<br>Prop 是父组件传进来，可以设置默认值，不可以修改<br>State 是组件自身状态，不可以在外部修改，尽量多写一些无状态的组件，也是方便后续的复用</p><h2 id="表单的受控与非受控"><a href="#表单的受控与非受控" class="headerlink" title="表单的受控与非受控"></a>表单的受控与非受控</h2><h2 id="组件的受控与非受控"><a href="#组件的受控与非受控" class="headerlink" title="组件的受控与非受控"></a>组件的受控与非受控</h2><p>通过 props 来判断能不能修改，不能修改 受控组件</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript模块化</title>
      <link href="/2021/04/11/JS%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2021/04/11/JS%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>作为一名程序员，你时常会感慨看的技术也很多，但就是一看就忘，为何不动动手把这些知识用文章的方式进行保存起来！让我们动起手来～</p><h1 id="梳理一下你对你模块化的理解～"><a href="#梳理一下你对你模块化的理解～" class="headerlink" title="梳理一下你对你模块化的理解～"></a>梳理一下你对你模块化的理解～</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端模块化已不是一个新的名词，早期js只是简单的表单交互，随着不断的发展，代码不断膨胀，模块化开发出现是必然的。</p><p>如果你对模块的规范化模拟两可，那么阅读起来吧！</p><h2 id="1-模块化的概念，进化历程！"><a href="#1-模块化的概念，进化历程！" class="headerlink" title="1 .模块化的概念，进化历程！"></a>1 .模块化的概念，进化历程！</h2><p>首先我们必须理解模块的出现带来的优点。</p><p>1.代码复用性，</p><p>2.提高可维护</p><p>3.方便代码间依赖关系</p><p>4.减少变量污染</p><p>早期没有模块化的概念，那么开发者又是怎么实现类似模块化的方式呢！</p><h3 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h3><p>  定义全局函数，每个功能看作是一个模块，用时直接调用函数名即可。</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">module1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"module1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"module2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//直接调用</span><span class="token function">module1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点 全局变量污染，模块间无依赖，</p><h3 id="namespace模式，对象封装"><a href="#namespace模式，对象封装" class="headerlink" title="namespace模式，对象封装"></a>namespace模式，对象封装</h3><p>解决函数的缺点，保证减少了变量的污染，只暴露一个模块名，把所有模块成员封装在一个对象中。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> module1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"moduleName"</span><span class="token punctuation">,</span>  val<span class="token operator">:</span> <span class="token string">"moduleVal"</span><span class="token punctuation">,</span>  <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token string">"newVal"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is fun things!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"newName"</span><span class="token punctuation">;</span> <span class="token comment">//直接修改内部属性，好的模块应该具有独立性，局部作用域。</span>module1<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//能够调用fun 修改 val属性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：虽然能保证减少了变量的污染。但最大的缺点 外部能够利用模块名进行修改内部属性，存在安全隐患。</p><h3 id="IIFE（匿名函数自定义）"><a href="#IIFE（匿名函数自定义）" class="headerlink" title="IIFE（匿名函数自定义）"></a>IIFE（匿名函数自定义）</h3><p>数据是私有的，通过挂载在window上来暴露接口，外部不能直接操作内部中的属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// module.js文件</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义内部变量</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"https://wweicattle.github.io/"</span><span class="token punctuation">;</span>  <span class="token comment">//操作数据的函数</span>  <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用于暴露有函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo() </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//内部私有的函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"otherFun()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//暴露行为</span>  window<span class="token punctuation">.</span>moduele1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> fun1<span class="token punctuation">,</span> fun2 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//ES6写法</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以知道，只有暴露出来的属性方法才可操作。IIFE的解决了 对象封装的缺点。</p><h3 id="IIFE增强："><a href="#IIFE增强：" class="headerlink" title="IIFE增强："></a>IIFE增强：</h3><p>现代使用的模块实现，引入jQuery，通过行参传入，这样做的优点能够保证模块的独立性，以及模块之间的依赖关系变明显。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span>  <span class="token comment">// module.js文件</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> $</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">callMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"callMethods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//操作数据的函数</span>    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//调用callMthods方法</span>      <span class="token function">callMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//内部私有的函数</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"otherFun()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//暴露行为</span>    window<span class="token punctuation">.</span>moduele1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> fun1<span class="token punctuation">,</span> fun2 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//ES6写法</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随着js代码 逻辑业务增多，我们不断会把一个js文件看作一个简单的模块，请看下面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">moduleMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"moduleMethods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 执行moduleMethods方法</span>    <span class="token function">moduleMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（补充）当然script文件 还包含重要的async，defer属性，异步加载模块。</p><p>不加属性即同步加载，此时会更加消耗时间开销，同时阻塞html解析，渲染。</p><p>async：遇到该js文件，立马加载，加载完后就执行，其会阻塞html的解析。</p><p>deffer：遇到该js文件，立马加载，此时会阻塞html解析，但加载完后不立马执行，等到后面html解析渲染完后才执行。</p><p>请看下列图，非常清晰。</p><p> ![image-20211214202207688](/Users/wuwei/Library/Application Support/typora-user-images/image-20211214202207688.png)</p><p>  模块作用于全局作用作用域下，我们必须时刻保证模块的先后引入，需要先引入jquery 才行，而且每个js文件都是暴露在全局的，造成变量冲突，并且请求数量增多。这些一系列 问题出现， 让我们后期维护造成成本增高。</p><p>当然这种简单的模块化实现思想是进步的。那我们要以什么方式解决的呢，那就是<strong>模块化规范</strong>。</p><h2 id="2-了解模块化规范："><a href="#2-了解模块化规范：" class="headerlink" title="2.了解模块化规范："></a>2.了解模块化规范：</h2><p>简单来说以一种规则，一种模块编写、模块依赖和模块运行的方案。</p><p>常见的javascript模块规范有：CommonJS ，AMD，CMD，UMD，ES6Module。</p><h3 id="（1）CommonJS"><a href="#（1）CommonJS" class="headerlink" title="（1）CommonJS"></a>（1）CommonJS</h3><p>特点，优点：</p><ol><li><p>每一个文件看作一个模块，其中的变量属性是私有的，不会污染全局。</p></li><li><p>模块多次加载，加载一次便被缓存起来，再次加载从缓存中取出。要想让模块重新加载，需手动清除缓存。</p></li><li><p>模块加载依照顺序，依次在代码中出现先后。</p></li><li><p>Node.js的模块采用该规范。 exports导出，require导入。</p></li><li><p>模块加载 值拷贝，若是引用类型则是浅拷贝（与ES6不同，ES6采用引用）</p></li><li><p>它是以同步的方式加载模块，模块加载完成后就开始执行。一般来说nodejs这种服务于服务器，模块文件一般都已经存在本地磁盘了，所以同步的方式就可以。</p></li></ol><p><strong>在服务器使用：</strong></p><p>// module1.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span>  name<span class="token operator">=</span><span class="token string">"hello,module!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">moduleMethods</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  name<span class="token operator">=</span><span class="token string">"hello,ou!"</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span>moduleMethods <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>// main.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> params<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./module1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello,module!</span>params<span class="token punctuation">.</span><span class="token function">moduleMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello,module!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>特别注意 commonjs加载的机制是导出的值是导入的值的拷贝，加载一次便缓存起来，所以第二次输出的name值直接从缓存中取出“hello,module!”；</p><p><strong>在浏览器使用：</strong></p><p>需要借助（Browserity）需要进行编译打包处理，转换成浏览器所能识别的代码</p><ul><li><p>第一步： npm install browserify</p><p>以node上面module1.js与main.js文件为例，直接将main.js文件编译成浏览器所识别的语法</p></li><li><p>第二步：npx browserify main.js -o bundle.js</p><p>我们发现生成一个buundle.js文件 创建一个index.html文件引入打开浏览器即可：</p></li></ul><h3 id="（2）AMD-（ASynchromous-Module-Definition）异步加载方式"><a href="#（2）AMD-（ASynchromous-Module-Definition）异步加载方式" class="headerlink" title="（2）AMD （ASynchromous Module Definition）异步加载方式"></a>（2）AMD （ASynchromous Module Definition）异步加载方式</h3><p>特点，优点：</p><p>在浏览器中同步加载模块方式让用户等待更多的时间，等到上一个模块加载且执行完成后才可向后继续执行。异步加载的方式出现，一般浏览器采用AMD的规范。它的出现也让我们的模块更有顺序化，加载完成后执行一个指定回调。</p><p>AMD是RequireJs在推广时候模块定义的规范的产出。</p><p> // require.js用法</p><p> 使用require([module],callback)关键词加载模块</p><ul><li>[module] :是一个数组，加载的模块名</li><li>callback :加载成功返回的回调函数<br>使用define定义模块 </li><li>define（fn）；fn则是定义的模块体。</li><li>define（[module],fn）若定义的模块还依赖其他模块，则第一个参数是一个数组，引入的模块文件名。</li></ul><p>​    具体使用:</p><p>// 创建一个index.html 引入require.js设置date-main入口文件mian.js</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/require.js/2.3.6/require.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>main.js 引入定义模块module2.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'module2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">alerter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      alerter<span class="token punctuation">.</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>module2.js文件引入module1.文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'module1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">dataService</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"module2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'ww'</span>    <span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>dataService<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 暴露模块</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> showMsg <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>module1.js文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"module1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">'this is Module！，you are'</span>   <span class="token keyword">function</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> getMsg <span class="token punctuation">&#125;</span> <span class="token comment">// 暴露模块</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eec36b23e364a289b6fcfd736f0dd73~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p> 我们可以发现其AMD模块，保证了模块间的依赖关系,其还是异步加载不会阻塞，当然也可以根据需要动态加载模块。</p><h3 id="（3）CMD（Common-Module-Definition）-通用模块定义"><a href="#（3）CMD（Common-Module-Definition）-通用模块定义" class="headerlink" title="（3）CMD（Common Module Definition） 通用模块定义"></a>（3）CMD（Common Module Definition） 通用模块定义</h3><p>与AMD类似，只不过模块定义加载，解析时机有所不同。</p><p>CMD专门作用于浏览器端，模块的加载是异步的，使用时才会加载。它集合了CommonJs和AMD的规范的特点。</p><p>SeaJS使用CMD模块定义规范。</p><p>具体用法：</p><p> 在index.html文件，入口文件main.js</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./sea.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"./main.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// main.js文件</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> m2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./module2.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> m3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./module3.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// module1.js文件</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//内部变量数据</span>  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'this is module1'</span>  <span class="token comment">//内部函数</span>  <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//向外暴露</span>  exports<span class="token punctuation">.</span>show <span class="token operator">=</span> show<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//module2.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"modeul2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    msg<span class="token operator">:</span> <span class="token string">'I am module2'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// module3.js文件</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"module3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'module3'</span>    <span class="token comment">//同步引入module4 模块</span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module4"</span><span class="token punctuation">)</span>    exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// module4.js文件</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"module4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//引入依赖模块(异步)module1模块</span>  require<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token string">"./module1"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">m1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    m1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"异步引入依赖模块1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7658fdff7da40bebfd607537f03c804~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>AMD与CMD区别</strong>：</p><p>1.AMD依赖前置，一开始就开始加载，而CMD是依赖就近，需要时才去</p><p>2.AMD提前执行，CMD是延迟执行。</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./a'</span><span class="token punctuation">,</span> <span class="token string">'./b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在定义模块时 就要声明其依赖的模块</span>    a<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ....</span>    b<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// ....</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span>   a<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ... </span>      <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span> <span class="token comment">// 可以在用到某个模块时 再去require</span>   b<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// ... </span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）UMD通用模块定义"><a href="#（4）UMD通用模块定义" class="headerlink" title="（4）UMD通用模块定义"></a>（4）UMD通用模块定义</h3><p>AMD与CommonJs的综合产物</p><p>主要用作浏览器端，他能够统一CommonJS和AMD规范生态系统。使用时进行检测要使用的哪个模块系统。</p><p>并把所有的包装在一个立即执行函数中（IIFE）。目的是实现两个生态共存。</p><p>//例子</p>   <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//是否支持CommonJs</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//是否支持Amd</span>        <span class="token comment">//dosomething();</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//全局上</span>          window<span class="token punctuation">.</span>eventUtil <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（5）ES6-Module（重要）"><a href="#（5）ES6-Module（重要）" class="headerlink" title="（5）ES6 Module（重要）"></a>（5）ES6 Module（重要）</h3><p>  在ES6出现模块化之前，根本没有模块化的规范。直到ES6 模块的出现，他的规范得到越来越广泛的支持。</p><p> 它集成了COMMONJS与AMD两种优点。他的出现可以完全替代ConmonJS和AMD规范，成为浏览器通用的模块解决方案。</p><p>主要特点：</p><p>它的设计是静态加载或者编译时加载思想，不用在模块运行加载时就能确定其依赖关系。而CommonJS，AMD只能在运行时才能确定这些东西。</p><ul><li><p>单例模式，只加载一次，</p></li><li><p>export，impotr 导入导出，</p></li><li><p>默认模块是严格模式，this指向undefined，且定义的变量不会添加到window上</p></li><li><p>异步加载执行</p></li><li><p>等等…</p></li></ul><p>简单使用：</p><p> // 定义模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//module1.js</span><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"this is module1.js"</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//module2.js</span><span class="token keyword">let</span> moduleTwo<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">moduleMethod</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is module2 methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>// 引用模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// main.js</span><span class="token keyword">import</span> modeleOne <span class="token keyword">from</span> <span class="token string">"./module1.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> moduleTwo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./module2.js"</span><span class="token punctuation">;</span><span class="token comment">// 输出module1对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>modeleOne<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行module2方法</span>moduleTwo<span class="token punctuation">.</span><span class="token function">moduleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器中使用</p><ul><li><p>主流浏览器中加载只需在script标签中添加type=“module” 属性即可加载ES6模块。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./moduel1.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>大部分浏览器还是不支持该ES6模块，因此需要先转为ES5代码，之后再使用Browserify编译打包。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/daa6724b75654a84aad926128e308d55~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//module1.js</span><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"this is module1.js"</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//module2.js</span><span class="token keyword">let</span> moduleTwo<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">moduleMethod</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is module2 methods"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// main.js</span><span class="token keyword">import</span> modeleOne <span class="token keyword">from</span> <span class="token string">"./module1.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> moduleTwo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./module2.js"</span><span class="token punctuation">;</span><span class="token comment">// 输出module1对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>modeleOne<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行module2方法</span>moduleTwo<span class="token punctuation">.</span><span class="token function">moduleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一步</li><li>npm install babel-cli browserify -D</li><li>npm install babel-preset-es2015 -D</li><li>reset 预设(将es6转换成es5的所有插件打包)</li></ul><ul><li>第二步定义.babelrc<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li>第三步npx babel main -d budle；生成如图：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8700c986cafd452988ec0a204b4ca992~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li></ul><p>已经编译成require语句了，直接下只要将main.js利用browserify转化为浏览器所识别的语法。</p><ul><li>第四步npx browserify main.js -o bundle.js</li></ul><p>再index.html中引入即可。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8aa8b6dcdd04fa39697e87e9065d4d5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>在服务器中</p><p>ES6与CommonJs的区别：</p><p>总结：</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript大全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router源码解析</title>
      <link href="/2021/02/11/Vue-Router/"/>
      <url>/2021/02/11/Vue-Router/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vue中使用到的路由插件是vue-router。它是vue官方路由插件，依赖于Vue。近期学习了下vue-router源码，并自己写了一个小例子,包含动态路由<code>addRoutes，router-view，router-link</code>。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66a1c24046064992abafb697cd142526~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>现在让我们看一看vue-router到底是怎样实现的！让我们静下心来好好看看</p><p>实现文件目录：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6abb5cfb4bbe4900a780d5bdbe287db9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>首先我们第一步引入：<br>router/index.js文件中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> VueRoutes <span class="token keyword">from</span> <span class="token string">'./routes/VueRoutes.js'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRoutes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token keyword">let</span> routers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRoutes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span> <span class="token string">'hash'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道<code>Vue.use(plugin)</code>，会执行install方法。 </p><h2 id="install-js文件中"><a href="#install-js文件中" class="headerlink" title="install.js文件中"></a>install.js文件中</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> routerView <span class="token keyword">from</span> <span class="token string">"./view.js"</span><span class="token keyword">import</span> routerLink <span class="token keyword">from</span> <span class="token string">"./viewLink.js"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 每个组件混入该生命周期</span>  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  判断是否是根组件options中才有router，根组件才执行，在你new Vue时会传入     </span>      <span class="token comment">//  一个let router=new VueRoutes();</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_rootRouter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>router<span class="token punctuation">;</span>        <span class="token comment">// 重点：路由初始化</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_router<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment">// 进行设置_route的响应式，当_route发生变化时会进行页面更新</span>        Vue<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"_route"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_router<span class="token punctuation">.</span>history<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_rootRouter <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>_rootRouter<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"$route"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rootRouter<span class="token punctuation">.</span>_route<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"$router"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rootRouter<span class="token punctuation">.</span>_router<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//全局组件router-view router-link。具体后面会说</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'RouterView'</span><span class="token punctuation">,</span> routerView<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'RouterLink'</span><span class="token punctuation">,</span>    routerLink  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以知道install主要做了</p><ol><li>利用mixin之后在每个组件中混入该<code>beforeCreate</code>生命周期</li><li>生命周期中对根组件进行设置私有属性<code>_rootRouter，_router</code></li><li>每个子组件中获取<code>this.$route</code>,<code>this.$router</code>就会在向上寻找根组件上的<code>_rootRouter._router</code>和<code>_rootRouter._route</code></li><li>注册全局组件<code>router-view，router-link</code><br>下面看下<strong>路由</strong>的构造函数做了什么？</li></ol><h2 id="routes目录下"><a href="#routes目录下" class="headerlink" title="routes目录下"></a>routes目录下</h2><h3 id="index-js文件中"><a href="#index-js文件中" class="headerlink" title="index.js文件中"></a>index.js文件中</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">VueRoutes</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回一个pathlist表示路由数组，与路由映射表 pathMap</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>matcher <span class="token operator">=</span> <span class="token function">createMatcher</span><span class="token punctuation">(</span>options <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//路由模式有hash，history等，我们主要以hash来讲</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HASHHistory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//下面会讲，路由初始化</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">init</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token operator">...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//通过跳转url，获取到路由映射表</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">match</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>matcher<span class="token punctuation">[</span><span class="token string">"match"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//this.$router.push跳转</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">push</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//添加动态路由</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">addRoutes</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>matcher<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> VueRouters<span class="token punctuation">.</span>install <span class="token operator">=</span> install<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数中做了：</p><ol><li><code>this.matcher</code>返回<code>match，addRoutes</code>，匹配路由对象与添加路由，之后通过路由实例就能够添加动态路由，和获取路由的映射关系。</li><li>实例化一个<code>history</code>中，对url监听变化，重新获取跳转新的路由映射，更新_route页面重新渲染</li><li>路由的初始化，其中的关键<code>transitionTo</code>，监听路由的变化后对页面的更新</li></ol><p><strong>以上三点我们一一看代码详细说吧</strong></p><h3 id="createMatcher-js"><a href="#createMatcher-js" class="headerlink" title="createMatcher.js"></a>createMatcher.js</h3><p>（1）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createMatcher</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回路径的列表, 路径和路由对象的映射</span>  <span class="token keyword">var</span> <span class="token punctuation">&#123;</span>    pathList<span class="token punctuation">,</span>    pathMap  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">createRouteMap</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 添加动态路由</span>  <span class="token keyword">function</span> <span class="token function">addRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">createRouteMap</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 当路由发生变化的时候，会进行查找该路由 所对应的映射关系，router-view 会用到</span>  <span class="token keyword">function</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> record <span class="token operator">=</span> pathMap<span class="token punctuation">[</span>location<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> local <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      path<span class="token operator">:</span> location    <span class="token punctuation">&#125;</span>    <span class="token comment">// 找到当前的记录</span>    <span class="token comment">// 需要 到对应的记录，并且根据记录产生一个匹配 的数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">createRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> local<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 没有记录则返回为空</span>    <span class="token keyword">return</span> <span class="token function">createRoute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    match<span class="token punctuation">,</span>    addRoutes  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">javascript在</span><span class="token template-punctuation string">`</span></span>createMatcher<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">中，传入</span><span class="token template-punctuation string">`</span></span>routes<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">，之后计算出</span><span class="token template-punctuation string">`</span></span>pathList，pathMap<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">。我们来看下</span><span class="token template-punctuation string">`</span></span>createRouteMap<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">实现### createRouteMap.js</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createRouteMap</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> pathList<span class="token punctuation">,</span> pathMap</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理routes中的路由映射</span>  pathList <span class="token operator">=</span> pathList <span class="token operator">?</span> pathList <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  pathMap <span class="token operator">=</span> pathMap <span class="token operator">?</span> pathMap <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  遍历路由添加到pathList，pathMap中</span>  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">addRoutesRecord</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    pathList<span class="token punctuation">,</span>    pathMap  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把routes传入之后继续进行遍历之后，添加到<code>pathList，pathMap</code>中</p><p>看下addRoutesRecord的实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addRoutesRecord</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> path  <span class="token comment">//parent是当遍历的是chilren中的路由才有的parent</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>parent<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>routes<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    path <span class="token operator">=</span> routes<span class="token punctuation">.</span>path<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> record <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">,</span>    component<span class="token operator">:</span> routes<span class="token punctuation">.</span>component<span class="token punctuation">,</span>    parent  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pathMap<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pathList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    pathMap<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//   如果有children 就继续遍历，生成扁平化放进数组</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>routes<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    routes<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//routes传进去，表示当前路由的父路由</span>      <span class="token function">addRoutesRecord</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> pathList<span class="token punctuation">,</span> pathMap<span class="token punctuation">,</span> routes<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>routes有children情况下，会继续执行<code>addRoutesRecord</code>，继续添加到<code>pathList，pathaMap</code>中。变成一维数组吧。转化请看下面，还会有parent，之后会在路由变化，router-view重新生成<code>render</code>中用到。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    component<span class="token operator">:</span> Home  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'About'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token comment">/* webpackChunkName: "about" */</span> <span class="token string">'../views/About.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> aaa      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> bbb      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变成</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbd1f642d78e451baa622091160d931b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="HashHistory-js"><a href="#HashHistory-js" class="headerlink" title="HashHistory.js"></a>HashHistory.js</h3><p>（2）<br>接下来我们看下 </p><p><code>this.history = new HashHistory(this);</code></p><p>因为小例子所以我们只关心hash路由模式，它会继承于<code>HashHistory，HashHistory</code>会继承于<code>BaseHistory</code>基类。因为之前考虑history，hash，abstract都有共同的属性与方法。</p><p>看下HashHistory</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HASHHistory</span> <span class="token keyword">extends</span> <span class="token class-name">BaseHistory</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token function">getCurrentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setlister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置监听hash的变化</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hashchange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// console.log();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听了路由的变化，会执行this.tansitionTo(url),重要看下基类中的transitionTo实现</p><p>BaseHistory类中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">// 跳转的核心逻辑location </span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">transitionTo</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> oncomplete</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> routes<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是否与之前的           </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>path<span class="token operator">==</span>location<span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token operator">==</span>routes<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>routes<span class="token punctuation">)</span>   <span class="token comment">// 执行监听路由的变化</span>   oncomplete <span class="token operator">&amp;&amp;</span> <span class="token function">oncomplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 执行页面的更新</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">listen</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token operator">=</span>cb<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断跳转的url，获取到它的路由映射关系，执行cb更新路由实例的_route，更新页面。</p><p>（3）看下init，在vueRoutes构造函数中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">init</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token function-variable function">setlister</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_that</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      _that<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">setlister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 默认会执行一次</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">getCurrentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">setlister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 视图更新，已经对实例的_route进行拦截，发生变化会进行对页面的更新</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      app<span class="token punctuation">.</span>_route<span class="token operator">=</span>route<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在初始化过程中，<code>默认会执行一次transitionTo</code>，之后transitionTo中匹配到类似像<code>&#123;path：“/”,matched:[...]&#125;</code>;之后赋值于<code>app._route</code>，更新页面。我们知道路由的变化会导致<code>router-view</code>重新生成render,渲染到页面。</p><p>router-view是一个全局组件，它的实现是一个函数式渲染</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    parent<span class="token punctuation">,</span>    data  <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//获取到当前的路由对象</span>    <span class="token keyword">let</span> route <span class="token operator">=</span> parent<span class="token punctuation">.</span>$route<span class="token punctuation">;</span>    <span class="token keyword">let</span> match <span class="token operator">=</span> route<span class="token punctuation">.</span>matched<span class="token punctuation">;</span>    data<span class="token punctuation">.</span>routerViews <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> depth <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$vnode <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>routerViews<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> record <span class="token operator">=</span> match<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>record<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> component <span class="token operator">=</span> record<span class="token punctuation">.</span>component<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时matcher比如长这样：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/276be18361da473f8d9c120c2db997af~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>知道当前路由的映射，路径path与组件component。假如嵌套路由时候，这时会有两个router-view，第一个<code>router-view</code>执行后设置一个状态，<code>data.routerViews = true;</code>之后在次只要根据判断<code>(parent.$vnodeparent.$vnode.data.routerViews)</code>为true则证明现在是第二个router-view。</p><blockquote><p>总结，上面只是实现了简单的动态路由，router-view，router-link,还有像导航钩子等都没实现，有兴趣的小伙伴，<a href="https://github.com/vuejs/vue-router">看看这个哈</a>，也只是草草的写文章 记录了一下，须要查看完整的例子，小伙伴们可以点击<a href="https://github.com/wweicattle/vue-code/tree/master/VueRouter/testdemo">gihtub</a>查看，以上只是自己的一点理解，希望有错误的可以一起交流一下哈，力争共同进步。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Computed 源码解析</title>
      <link href="/2021/02/01/Vue-Computed/"/>
      <url>/2021/02/01/Vue-Computed/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>今天来研究下Vue中的 Computed源码过程，学习computed我们必须理解以下几点：</p><blockquote><ol><li>computed内部是怎么缓存的？</li><li>computed中的依赖响应数据如何依赖收集？</li></ol></blockquote><hr><p>我们知道vue调用实例后，Vue内部initState时候，会处理很多不同的数据，包括有<code>data、props、methods....</code></p><p>处理computed的方法就是initComputed。<br>看看initComputed做了些啥！</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initComputed</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> computed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> watchers <span class="token operator">=</span> vm<span class="token punctuation">.</span>_computedWatchers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 是否服务器渲染 </span>    <span class="token keyword">var</span> isSSR <span class="token operator">=</span> <span class="token function">isServerRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> computed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> userDef <span class="token operator">=</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> getter <span class="token operator">=</span> <span class="token keyword">typeof</span> userDef <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> userDef <span class="token operator">:</span> userDef<span class="token punctuation">.</span>get<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token string">"Getter is missing for computed property \""</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"\"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSSR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// create internal watcher for the computed property.</span>        watchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>          vm<span class="token punctuation">,</span>          getter <span class="token operator">||</span> noop<span class="token punctuation">,</span>          noop<span class="token punctuation">,</span>          computedWatcherOptions        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">defineComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面做了几件事1.为每个computed中的属性添加 watcher。2.defineComputed的处理</p><h2 id="1-new-Watcher生成一个computed-Watcher"><a href="#1-new-Watcher生成一个computed-Watcher" class="headerlink" title="1.new Watcher生成一个computed-Watcher"></a>1.new Watcher生成一个computed-Watcher</h2><h4 id="先来看下new-Watcher-做了些啥，先列出重点的源码"><a href="#先来看下new-Watcher-做了些啥，先列出重点的源码" class="headerlink" title="先来看下new Watcher()做了些啥，先列出重点的源码"></a>先来看下new Watcher()做了些啥，先列出重点的源码</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Watcher</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> options<span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">?</span> <span class="token keyword">undefined</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// getter 就是 watcher 回调</span><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始<code>new Watcher(vm, getter, &#123; lazy: true &#125;)</code>的<code>lazy</code>是设为true，这样在执行computed中属性初始化的时候，不用立马求值，算是一个小优化。只有等到后面再次请求computed中的值才会进行<code>this.get();</code></p><h2 id="2-再看看defineComputed做了一些什么鬼！"><a href="#2-再看看defineComputed做了一些什么鬼！" class="headerlink" title="2.再看看defineComputed做了一些什么鬼！"></a>2.再看看defineComputed做了一些什么鬼！</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">defineComputed</span><span class="token punctuation">(</span>    <span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置 set 为默认值，避免 computed 并没有设置 set</span>    <span class="token keyword">var</span> <span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>              <span class="token comment">//  如果用户设置了set，就使用用户的set</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 包装get 函数，主要用于判断计算缓存结果是否有效</span>        get<span class="token operator">:</span><span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>                set<span class="token operator">:</span>set    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是给computed中的每一个属性都进行依赖拦截处理，<code>看下get中重点createComputedGetter。</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取到相应 key 的 computed-watcher</span>        <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 如果 computed 依赖的数据变化，dirty 会变成true，从而重新计算，然后更新缓存值 watcher.value</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 这里后面重点讲，主要是让页面watcher再收集依赖一次</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到上面的<code>watcher.dirty</code>了吗，就是这个，当你dirty为true时才会执行内部的<code>watcher.evaluate()</code>,执行之后又会进行<code>this.dirty</code>进行设为false，这样就不用每一次都进行重新求值，起到了真正缓存的作用，那什么时候才要进行设为dirty为true呢，就是当computed依赖的响应数据进行变化的时候，会触发它依赖收集中的<code>computed-watcher</code>，之后进行update。看下面简单源码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token punctuation">.</span>还有其他无关操作，已被省略<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-computed中的响应数据是如何收集依赖"><a href="#3-computed中的响应数据是如何收集依赖" class="headerlink" title="3.computed中的响应数据是如何收集依赖"></a>3.computed中的响应数据是如何收集依赖</h2><p>Vue内部第一次的依赖收集是在<code>render</code>遍历生成vnode的时候 ，此时render像下面这样</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>staticClass<span class="token operator">:</span><span class="token string">"app"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>computedval<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n "</span><span class="token punctuation">)</span>， <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>on<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string">"click"</span><span class="token operator">:</span>btn<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">"buttonn"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">evaluate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>比如上面的<code>computedval</code>是一个计算属性，获取计算属性值会去触发该属性的get，因为上面说的dirty是<code>true</code>（不懂上面看一下！）之后会执行 <code>watcher.evaluate()</code>;重点看下evaluate中执行的<code>this.get()</code>方法，先重要几行源码。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//   将当前的computed-watcher设为Dep.target</span>    <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value<span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">;</span>    <span class="token comment">// 会执行响应数据的依赖，此时的Dep.target是computed-watcher</span>    value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我会<strong>将上面这段get方法按过程说明一下，小伙伴最好把这段代码印在脑子中哦！</strong><br>我们首先来pushTarget究竟发生了是什么。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//保存 watcher</span><span class="token keyword">var</span> targetStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   targetStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetStack<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>computed-watcher</code>传进来，放进到<code>targetStack</code>数组中，此时该数组中有[页面watcher，computed-watcher],诶  ！小伙伴又会问为什么不是[computed-watcher]呢，是的会有一个<strong>页面渲染watcher</strong>。</p><p>我们得回来<strong>Vue的初始化</strong><code>$mount</code>，之后会执行<code>mountComponent()</code>;不信看源码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$mount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  <span class="token parameter">el<span class="token punctuation">,</span>  hydrating</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> inBrowser <span class="token operator">?</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>    <span class="token parameter">vm<span class="token punctuation">,</span>    el<span class="token punctuation">,</span>    hydrating</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> updateComponent<span class="token punctuation">;</span>      <span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">debugger</span><span class="token punctuation">;</span>        vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 已经会执行new watcher一次</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">before</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点看上面的new Watcher()，看下构造函数主要的Watcher源码，</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">Watcher</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">?</span>     <span class="token keyword">undefined</span> <span class="token operator">:</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后执行this.get(),因为new watcher没传lazy，默认就是空的。接着是不是就又会执行pushTarget(this),之后页面watcher会被保存在targetStack中，之后就会执行updatecompoennt了，之后会遍历render生成vnode，<strong>回到3问题的开头了</strong>。</p><p>我们已经知道pushtarget中的过程了，接下来接着执行 value = this.getter.call(vm, vm);此时会发生响应数据的get</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//此时Dep.target是computed-watchers</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//依赖收集</span>        dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> value    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时依赖的响应数据就已经收集到<code>computed-watcher</code>，此时<code>value</code>已经有值。<br>接下来我们看看会执行popTarget()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  targetStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> targetStack<span class="token punctuation">[</span>targetStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>popTarget方法主要做了把<code>computed-watcher</code>移除，此时Dep.target是页面的watcher，此时可以说把get执行已经执行完，就是evaluate执行完了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取到相应 key 的 computed-watcher</span>        <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 如果 computed 依赖的数据变化，dirty 会变成true，从而重新计算，然后更新缓存值 watcher.value</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 这里后面重点讲，主要是让页面watcher再收集依赖一次</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到了吗就是上满的<code>watcher，evaluate()</code>执行，之后执行<code>this.get()</code>我们才balabala上面说了一大堆，说明这个<code>evaluate</code>不简单，里面还有一些方法都没说，只是把我们主要的说一下。</p><p>接着继续看又会执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这一段也是重要哦，后面有时间在扩展吧，主要是让响应数据的dep中的subs收集到页面的watcher。</p><p>这样上面computed中的属性所依赖的响应的数据就会把computed-watcher与页面的watcher全部收集到了。</p><p>这时当你响应的数据发生变化，就会遍历subs订阅者[computed-wathcer,页面wathcer],执行update，最终达到更新视图。</p><blockquote><p>感谢小伙伴的阅读，希望文章有错的，可以交流一下。共同学习</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Watch源码解析</title>
      <link href="/2021/01/01/Vue-Watch/"/>
      <url>/2021/01/01/Vue-Watch/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><blockquote><p>我们知道的Vue中的wathcer是一个侦听器，监听响应数据的变化，当你想在数据发生变化时，需要进行开销较大的操作时，比如异步请求等。这时你会使用到侦听器。</p></blockquote><p>首先让我们看看初始化的watch的源码！</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//初始化属性,data,computed,props,watch等等</span>    <span class="token function">initState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//......</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">initWatch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>watch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">initWatch</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> watch</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//遍历watch，为 每一个 watch添加订阅者就是user-watcher</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> watchOpt <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>    <span class="token parameter">vm<span class="token punctuation">,</span>    expOrFn<span class="token punctuation">,</span>    handler<span class="token punctuation">,</span>    options</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//不同的watch写法，得到的hander也是不一样的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      options <span class="token operator">=</span> handler<span class="token punctuation">;</span>      handler <span class="token operator">=</span> handler<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//expOrFn是key ，handler是该key的监听回调,下面会很多次说起（监听回调）</span>    <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按步骤一步一步看下来 上面先遍历watch，后面给每个侦听属性添加一个<code>user-watcher</code>，其中传的参数<code>expOrFn</code>是key,<code>handler</code>是该key的监听回调,<code>handler</code>的取值可能会有几种情况，列出我们可能的watch形式。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">watch<span class="token operator">:</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token punctuation">&#123;</span>     <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    name<span class="token operator">:</span><span class="token string">"getNameWatch"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是一个<strong>对象</strong>时，就把该对象的<code>handler</code>赋值<code>handler</code>，<strong>函数</strong>的话就直接赋值<code>handler</code>，<strong>字符串</strong>就把<code>vm.getNameWatch</code>赋值给<code>handler</code>。</p><p>好了，之后我们看看<code>$watcher</code>发生了什么。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$watch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>    <span class="token parameter">expOrFn<span class="token punctuation">,</span>    cb<span class="token punctuation">,</span>    options</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//下面会说</span>    <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//立即执行一次该侦听wather</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 让我们快速吧视线移到<code>new Watcher(),</code>就是给每个侦听属性添加的<code>user-watcher</code>，看下<code>Watcher</code>源码，我会针对该知识，列重要的源码，就不累赘别的代码了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">Watcher</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> opt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> opt<span class="token punctuation">.</span>deep<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>      <span class="token comment">// 下面这段主要是设置该key的监听回调</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// this.get 作用就是执行 this.getter()</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">parsePath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> segments <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> segments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span>       <span class="token punctuation">&#125;</span>       obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>segments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> obj   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parsePath</code>主要返回了一个匿名函数，函数中的内容主要是会从<code>vm</code>上获取该侦听<code>key</code>的<code>value</code>，这样会发生依赖收集。<br>看看之后的执行吧，之后赋值给<code>this.getter</code>,之后执行<code>this.get()</code>就是执行<code>this.getter()</code>，执行了就会对该侦听属性进行依赖收集。说了这么多还是稍微多一个过程看吧。</p><p>我们已经知道parsePath会返回该侦听属性的监听回调。接下里继续 执行this.get()方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//把当前的user-watcher设置为Dep.target</span>     <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//把vm传进去，执行监听的回调，之后如果回调中有依赖的响应会触发它的依赖收集user-watcher。</span>     value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>value = this.getter.call(vm, vm);</code><br>这段会依赖收集watcher中的 key的订阅者，此时Dep.target是 user-watcher所以会被收集到subs数组中。</p><p>之后返回<code>this.get()</code>返回到<code>this.value</code>,再退到上面就是<code>Vue.prototype.$watch</code>中<code>new Watcher()</code>返回的<code>watcher</code>，再判断<code>immediate</code>是否为<code>true</code>表示立即执行一次该<code>key</code>的<code>handler</code>回调啦 。接着initWatch就大功告成了。</p><h4 id="之后在响应数据发生变化的时候就会派发更新，执行update就会执行user-watcher的监听回调啦啦啦！"><a href="#之后在响应数据发生变化的时候就会派发更新，执行update就会执行user-watcher的监听回调啦啦啦！" class="headerlink" title="之后在响应数据发生变化的时候就会派发更新，执行update就会执行user-watcher的监听回调啦啦啦！"></a>之后在响应数据发生变化的时候就会派发更新，执行<code>update</code>就会执行user-watcher的监听回调啦啦啦！</h4><blockquote><p>感谢阅读，希望有错误的地方指点指点，一起交流，一起进步。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React状态管理</title>
      <link href="/2020/02/01/React%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2020/02/01/React%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>推荐十款实用的React状态管理库，帮助您打造出高效、可维护的前端应用。让我们一起看看这些库的魅力所在！</p><p>在前端开发中，状态管理是至关重要的一环。React作为一款流行的前端框架，其强大的状态管理功能备受开发者青睐。本文将为您推荐10款实用的React状态管理库，帮助您打造出高效、可维护的前端应用。让我们一起看看这些库的魅力所在！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37a5ba1028a94fbd9cdee6fbc2af585a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=706&h=382&s=11338&e=webp&b=e2e0e6"></p><h4 id="1-Redux"><a href="#1-Redux" class="headerlink" title="1.Redux"></a>1.Redux</h4><ul><li>无疑是React社区的明星！提供了可预测的状态管理，让数据流更加清晰。</li></ul><p>Redux是一款强大的状态管理插件，它为React应用提供了可预测的状态管理。通过使用Redux，您可以轻松地管理应用的状态，提高代码的可维护性和可测试性。</p><p>Redux通过三个基本概念来管理状态：Action、Reducer和Store。Action是一个描述发生了什么的对象，Reducer是一个纯函数，根据Action来改变状态，Store则是状态容器，它包含了应用的所有状态。</p><p>使用Redux，您可以实现中央数据流，让数据在应用中的流动更加可预测、可维护。同时，Redux还提供了丰富的中间件和扩展，以满足各种复杂的状态管理需求。</p><p>复制</p><pre class="line-numbers language-none"><code class="language-none">javascript复制代码import &#123; createStore &#125; from &#39;redux&#39;;    &#x2F;&#x2F; 定义reducer  function counter(state &#x3D; 0, action) &#123;    switch (action.type) &#123;      case &#39;INCREMENT&#39;:        return state + 1;      case &#39;DECREMENT&#39;:        return state - 1;      default:        return state;    &#125;  &#125;    &#x2F;&#x2F; 创建store  let store &#x3D; createStore(counter);    &#x2F;&#x2F; 改变状态  store.dispatch(&#123; type: &#39;INCREMENT&#39; &#125;);  console.log(store.getState()); &#x2F;&#x2F; 输出: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-MobX"><a href="#2-MobX" class="headerlink" title="2.MobX"></a>2.MobX</h4><ul><li>简单易用，让你感受响应式编程的魅力。</li></ul><p>MobX是一款简单易用的状态管理插件，它采用了响应式编程的思想。使用MobX，您可以轻松地管理应用的状态，并且无需复杂的中间件和配置。</p><p>MobX通过定义状态和观察状态来实现响应式编程。当状态发生变化时，相关组件会自动更新。MobX还提供了丰富的工具和扩展，如React装饰器、副作用等，让状态管理更加简单、高效。</p><p>复制</p><pre class="line-numbers language-none"><code class="language-none">javascript复制代码import &#123; makeAutoObservable &#125; from &quot;mobx&quot;;    class Counter &#123;    constructor() &#123;      this.count &#x3D; 0;      makeAutoObservable(this);    &#125;      increment() &#123;      this.count++;    &#125;        decrement() &#123;      this.count--;    &#125;  &#125;    const counter &#x3D; new Counter();  counter.increment();  console.log(counter.count); &#x2F;&#x2F; 输出: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>轻量级且直观，是状态管理的新星。</li></ul><p>Reactx是一款轻量级的状态管理库，它旨在提供简单、直观的状态管理解决方案。使用Reactx，您可以轻松地创建可重用的组件和可维护的应用。</p><p>Reactx通过将组件的状态封装到Redux或MobX中来实现状态管理。它提供了React的API扩展和钩子函数，让您可以轻松地使用Redux或MobX进行状态管理。同时，Reactx还支持副作用和时间旅行等功能，以满足各种复杂的状态管理需求。</p><h4 id="4-NgRx-Store"><a href="#4-NgRx-Store" class="headerlink" title="4.NgRx/Store"></a>4.NgRx/Store</h4><ul><li>Angular的好伙伴，也在React中发光发热，让状态变得井井有条。</li></ul><p>NgRx是Angular框架中的状态管理库，Store是它的核心概念。使用NgRx/Store，您可以轻松地管理Angular应用的状态，提高代码的可维护性和可测试性。</p><p>Store是一个单一的状态树，它包含了应用的所有状态。通过定义状态的初始值和操作，您可以创建多个Store来管理不同的状态。同时，NgRx还提供了丰富的中间件和扩展，如Redux DevTools和时间旅行等功能。</p><h4 id="5-Alt-js"><a href="#5-Alt-js" class="headerlink" title="5.Alt.js"></a>5.Alt.js</h4><ul><li>基于Flux架构，轻松管理状态，带你回到前端开发的舒适区。</li></ul><p>Alt.js是一款简单易用的状态管理库，它采用了Flux架构的思想。使用Alt.js，您可以轻松地创建可重用的组件和可维护的应用。</p><p>Alt.js通过定义Store来管理状态。每个Store都有一个特定的责任和功能，并且可以独立地更新其状态。同时，Alt.js还提供了丰富的工具和扩展，如HTTP请求和时间旅行等功能。</p><h4 id="6-Recoil"><a href="#6-Recoil" class="headerlink" title="6.Recoil"></a>6.Recoil</h4><ul><li>Facebook的又一力作，让状态管理变得更加简单直观。</li></ul><p>Recoil是Facebook开源的一款状态管理库，其设计目标是提供一套更简单、更直观的状态管理方案。Recoil为每一个原子状态提供了独立的存储，让状态的读写变得更加直接和高效。同时，Recoil也提供了丰富的API，支持状态的订阅和事件的触发，使得状态管理变得更为灵活。</p><h4 id="7-Zustand"><a href="#7-Zustand" class="headerlink" title="7.Zustand"></a>7.Zustand</h4><ul><li>轻量级且可定制，让你享受“全局状态，本地访问”的快感。</li></ul><p>Zustand是一款轻量级、可定制的状态管理库。它的核心理念是“全局状态，本地访问”，通过提供一个全局的状态存储，让各个组件可以方便地访问和修改状态。Zustand的优点在于其API简洁，易于学习和使用，同时它的性能也非常出色。</p><h4 id="8-Jotai"><a href="#8-Jotai" class="headerlink" title="8.Jotai"></a>8.Jotai</h4><ul><li>专注于原子状态管理，像乐高积木一样组装你的状态。</li></ul><p>Jotai是一款专注于原子状态管理的库。它把应用的状态拆分成一个个独立的原子状态，每个状态都可以单独进行管理和操作。这种原子化的管理方式可以提高状态管理的效率和可维护性，同时也使得状态的复用变得更加容易。</p><h4 id="9-Redux-Toolkit"><a href="#9-Redux-Toolkit" class="headerlink" title="9.Redux Toolkit"></a>9.Redux Toolkit</h4><ul><li>Redux的超级加强版，一把利器解决所有问题。</li></ul><p>Redux Toolkit是一款基于Redux的状态管理工具集，它集成了Redux的核心功能，并提供了一系列的工具和方法，以帮助开发者更高效地进行状态管理。Redux Toolkit的目标是简化Redux的使用，让开发者能够更快地构建出稳定、可维护的前端应用。</p><h4 id="10-Valtio"><a href="#10-Valtio" class="headerlink" title="10.Valtio"></a>10.Valtio</h4><ul><li>为React量身定制，时间旅行和状态持久化都不在话下。</li></ul><p>Valtio是一款专门为React设计的状态管理库，它提供了一种简洁、直观的方式来管理应用的状态。Valtio使用Proxy对象来实现状态的观察和变化，让状态的读写变得更加直观和高效。同时，Valtio还支持时间旅行和状态的持久化，让状态管理变得更加灵活和强大。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上就是本文为您推荐的10款React状态管理库。这些库各有特色，有的注重性能和效率，有的注重简洁和易用性，有的则注重灵活性和可定制性。在选择状态管理库时，您需要根据自己的需求和团队的实际情况来进行选择。希望本文能为您的前端开发带来一些帮助和启示。</p><h3 id="技术前沿拓展"><a href="#技术前沿拓展" class="headerlink" title="技术前沿拓展"></a>技术前沿拓展</h3><p>前端开发，你的认知不能仅局限于技术内，需要发散思维了解技术圈的前沿知识。细心的人会发现，开发内部工具的过程中，大量的页面、场景、组件等在不断重复，这种重复造轮子的工作，浪费工程师的大量时间。</p><p>介绍一款程序员都应该知道的软件<a href="https://link.juejin.cn/?target=https://www.jnpfsoft.com/?juejinxl" title="https://www.jnpfsoft.com/?juejinxl">JNPF快速开发平台</a>，很多人都尝试用过它，它是功能的集大成者，任何信息化系统都可以基于它开发出来。</p><p>这是一个基于 Java Boot/.Net Core 构建的简单、跨平台快速开发框架。前后端封装了上千个常用类，方便扩展；集成了代码生成器，支持前后端业务代码生成，实现快速开发，提升工作效率；框架集成了表单、报表、图表、大屏等各种常用的 Demo 方便直接使用；后端框架支持 Vue2、Vue3。如果你有闲暇时间，可以做个知识拓展。</p><p>看完本文如果觉得有用，记得点个赞支持，收藏起来说不定哪天就用上啦～</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript导航图</title>
      <link href="/2020/01/01/TypeScript/"/>
      <url>/2020/01/01/TypeScript/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> TypeScript大全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
